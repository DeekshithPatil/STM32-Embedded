
stm32f446xx_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000d0c  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000ed0  08000ed0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000ed0  08000ed0  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08000ed0  08000ed0  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ed0  08000ed0  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ed0  08000ed0  00010ed0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ed4  08000ed4  00010ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08000ed8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000018  08000ef0  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000044  08000ef0  00020044  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001dd6  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000060e  00000000  00000000  00021e18  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000180  00000000  00000000  00022428  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000138  00000000  00000000  000225a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00002b43  00000000  00000000  000226e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00002106  00000000  00000000  00025223  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0000b684  00000000  00000000  00027329  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000329ad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000530  00000000  00000000  00032a28  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000eb8 	.word	0x08000eb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08000eb8 	.word	0x08000eb8

08000204 <delay>:
char msg[1024] = "UART Tx testing...\n\r";

USART_Handle_t USART2_Handle;

void delay(void)
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
	uint32_t i;

	for(i=0;i<1000000/2;i++)
 800020a:	2300      	movs	r3, #0
 800020c:	607b      	str	r3, [r7, #4]
 800020e:	e002      	b.n	8000216 <delay+0x12>
 8000210:	687b      	ldr	r3, [r7, #4]
 8000212:	3301      	adds	r3, #1
 8000214:	607b      	str	r3, [r7, #4]
 8000216:	687b      	ldr	r3, [r7, #4]
 8000218:	4a03      	ldr	r2, [pc, #12]	; (8000228 <delay+0x24>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d9f8      	bls.n	8000210 <delay+0xc>
	{

	}
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	bc80      	pop	{r7}
 8000226:	4770      	bx	lr
 8000228:	0007a11f 	.word	0x0007a11f

0800022c <GPIO_ButtonInit>:

void GPIO_ButtonInit()
{
 800022c:	b580      	push	{r7, lr}
 800022e:	b084      	sub	sp, #16
 8000230:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;
	memset(&GPIOBtn,0,sizeof(GPIOBtn));
 8000232:	1d3b      	adds	r3, r7, #4
 8000234:	220c      	movs	r2, #12
 8000236:	2100      	movs	r1, #0
 8000238:	4618      	mov	r0, r3
 800023a:	f000 fe35 	bl	8000ea8 <memset>

	GPIOBtn.pGPIOx = GPIOC;
 800023e:	4b0b      	ldr	r3, [pc, #44]	; (800026c <GPIO_ButtonInit+0x40>)
 8000240:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000242:	230d      	movs	r3, #13
 8000244:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000246:	2300      	movs	r3, #0
 8000248:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800024a:	2302      	movs	r3, #2
 800024c:	72bb      	strb	r3, [r7, #10]
	//GPIOLed.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP; //Output type does not matter when pin is configured as input
	GPIOBtn.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_NO_PUPD; //There already exists an external pull down
 800024e:	2300      	movs	r3, #0
 8000250:	72fb      	strb	r3, [r7, #11]


	GPIO_PeriClockControl(GPIOC, ENABLE);
 8000252:	2101      	movs	r1, #1
 8000254:	4805      	ldr	r0, [pc, #20]	; (800026c <GPIO_ButtonInit+0x40>)
 8000256:	f000 f8a9 	bl	80003ac <GPIO_PeriClockControl>

	GPIO_Init(&GPIOBtn);
 800025a:	1d3b      	adds	r3, r7, #4
 800025c:	4618      	mov	r0, r3
 800025e:	f000 f975 	bl	800054c <GPIO_Init>
}
 8000262:	bf00      	nop
 8000264:	3710      	adds	r7, #16
 8000266:	46bd      	mov	sp, r7
 8000268:	bd80      	pop	{r7, pc}
 800026a:	bf00      	nop
 800026c:	40020800 	.word	0x40020800

08000270 <USART2_GPIOInit>:

void USART2_GPIOInit(void)
{
 8000270:	b580      	push	{r7, lr}
 8000272:	b084      	sub	sp, #16
 8000274:	af00      	add	r7, sp, #0
	GPIO_Handle_t usart_gpios;
	memset(&usart_gpios,0,sizeof(usart_gpios));
 8000276:	1d3b      	adds	r3, r7, #4
 8000278:	220c      	movs	r2, #12
 800027a:	2100      	movs	r1, #0
 800027c:	4618      	mov	r0, r3
 800027e:	f000 fe13 	bl	8000ea8 <memset>

	usart_gpios.pGPIOx = GPIOA;
 8000282:	4b0e      	ldr	r3, [pc, #56]	; (80002bc <USART2_GPIOInit+0x4c>)
 8000284:	607b      	str	r3, [r7, #4]
	usart_gpios.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000286:	2302      	movs	r3, #2
 8000288:	727b      	strb	r3, [r7, #9]
	usart_gpios.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800028a:	2300      	movs	r3, #0
 800028c:	733b      	strb	r3, [r7, #12]
	usart_gpios.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_PIN_PU;
 800028e:	2301      	movs	r3, #1
 8000290:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinPupdControl = GPIO_SPEED_FAST;
 8000292:	2302      	movs	r3, #2
 8000294:	72fb      	strb	r3, [r7, #11]
	usart_gpios.GPIO_PinConfig.GPIO_PinAltFunMode = 7;
 8000296:	2307      	movs	r3, #7
 8000298:	737b      	strb	r3, [r7, #13]

	//USART2 TX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_2;
 800029a:	2302      	movs	r3, #2
 800029c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 800029e:	1d3b      	adds	r3, r7, #4
 80002a0:	4618      	mov	r0, r3
 80002a2:	f000 f953 	bl	800054c <GPIO_Init>

	//USART2 RX
	usart_gpios.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_3;
 80002a6:	2303      	movs	r3, #3
 80002a8:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&usart_gpios);
 80002aa:	1d3b      	adds	r3, r7, #4
 80002ac:	4618      	mov	r0, r3
 80002ae:	f000 f94d 	bl	800054c <GPIO_Init>
}
 80002b2:	bf00      	nop
 80002b4:	3710      	adds	r7, #16
 80002b6:	46bd      	mov	sp, r7
 80002b8:	bd80      	pop	{r7, pc}
 80002ba:	bf00      	nop
 80002bc:	40020000 	.word	0x40020000

080002c0 <USART2_Init>:

void USART2_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	af00      	add	r7, sp, #0
	memset(&USART2_Handle,0,sizeof(USART2_Handle));
 80002c4:	2210      	movs	r2, #16
 80002c6:	2100      	movs	r1, #0
 80002c8:	480e      	ldr	r0, [pc, #56]	; (8000304 <USART2_Init+0x44>)
 80002ca:	f000 fded 	bl	8000ea8 <memset>

	USART2_Handle.pUSARTx = USART2;
 80002ce:	4b0d      	ldr	r3, [pc, #52]	; (8000304 <USART2_Init+0x44>)
 80002d0:	4a0d      	ldr	r2, [pc, #52]	; (8000308 <USART2_Init+0x48>)
 80002d2:	601a      	str	r2, [r3, #0]
	USART2_Handle.USART_Config.USART_Baud = USART_STD_BAUD_115200;
 80002d4:	4b0b      	ldr	r3, [pc, #44]	; (8000304 <USART2_Init+0x44>)
 80002d6:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002da:	609a      	str	r2, [r3, #8]
	USART2_Handle.USART_Config.USART_HWFlowControl = USART_HW_FLOW_CTRL_NONE;
 80002dc:	4b09      	ldr	r3, [pc, #36]	; (8000304 <USART2_Init+0x44>)
 80002de:	2200      	movs	r2, #0
 80002e0:	73da      	strb	r2, [r3, #15]
	USART2_Handle.USART_Config.USART_Mode = USART_MODE_ONLY_TX;
 80002e2:	4b08      	ldr	r3, [pc, #32]	; (8000304 <USART2_Init+0x44>)
 80002e4:	2200      	movs	r2, #0
 80002e6:	711a      	strb	r2, [r3, #4]
	USART2_Handle.USART_Config.USART_NoOfStopBits = USART_STOPBITS_1;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <USART2_Init+0x44>)
 80002ea:	2200      	movs	r2, #0
 80002ec:	731a      	strb	r2, [r3, #12]
	USART2_Handle.USART_Config.USART_WordLength = USART_WORDLEN_8BITS;
 80002ee:	4b05      	ldr	r3, [pc, #20]	; (8000304 <USART2_Init+0x44>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	735a      	strb	r2, [r3, #13]
	USART2_Handle.USART_Config.USART_ParityControl = USART_PARITY_DISABLE;
 80002f4:	4b03      	ldr	r3, [pc, #12]	; (8000304 <USART2_Init+0x44>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	739a      	strb	r2, [r3, #14]

	USART_Init(&USART2_Handle);
 80002fa:	4802      	ldr	r0, [pc, #8]	; (8000304 <USART2_Init+0x44>)
 80002fc:	f000 fc65 	bl	8000bca <USART_Init>
}
 8000300:	bf00      	nop
 8000302:	bd80      	pop	{r7, pc}
 8000304:	20000034 	.word	0x20000034
 8000308:	40004400 	.word	0x40004400

0800030c <main>:

int main()
{
 800030c:	b580      	push	{r7, lr}
 800030e:	b082      	sub	sp, #8
 8000310:	af00      	add	r7, sp, #0
	char temp = 'a';
 8000312:	2361      	movs	r3, #97	; 0x61
 8000314:	71fb      	strb	r3, [r7, #7]
	USART2_GPIOInit(); //Configure the required pins into appropriate alternate functionality
 8000316:	f7ff ffab 	bl	8000270 <USART2_GPIOInit>

	USART2_Init(); //Configure USART2 as per requirement
 800031a:	f7ff ffd1 	bl	80002c0 <USART2_Init>

	GPIO_ButtonInit();
 800031e:	f7ff ff85 	bl	800022c <GPIO_ButtonInit>

	USART_PeripheralControl(USART2,ENABLE);
 8000322:	2101      	movs	r1, #1
 8000324:	4809      	ldr	r0, [pc, #36]	; (800034c <main+0x40>)
 8000326:	f000 fc21 	bl	8000b6c <USART_PeripheralControl>


	while(1)
	{
		//Wait till button is pressed
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){} //Wait until button is pressed
 800032a:	bf00      	nop
 800032c:	210d      	movs	r1, #13
 800032e:	4808      	ldr	r0, [pc, #32]	; (8000350 <main+0x44>)
 8000330:	f000 faa6 	bl	8000880 <GPIO_ReadFromInputPin>
 8000334:	4603      	mov	r3, r0
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f8      	bne.n	800032c <main+0x20>
		delay(); //To avoid debounce effect
 800033a:	f7ff ff63 	bl	8000204 <delay>

		USART_SendData(&USART2_Handle,(uint8_t *)&temp,1);
 800033e:	1dfb      	adds	r3, r7, #7
 8000340:	2201      	movs	r2, #1
 8000342:	4619      	mov	r1, r3
 8000344:	4803      	ldr	r0, [pc, #12]	; (8000354 <main+0x48>)
 8000346:	f000 fccb 	bl	8000ce0 <USART_SendData>
		while(GPIO_ReadFromInputPin(GPIOC, GPIO_PIN_NO_13)){} //Wait until button is pressed
 800034a:	e7ee      	b.n	800032a <main+0x1e>
 800034c:	40004400 	.word	0x40004400
 8000350:	40020800 	.word	0x40020800
 8000354:	20000034 	.word	0x20000034

08000358 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000358:	480d      	ldr	r0, [pc, #52]	; (8000390 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800035a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800035c:	480d      	ldr	r0, [pc, #52]	; (8000394 <LoopForever+0x6>)
  ldr r1, =_edata
 800035e:	490e      	ldr	r1, [pc, #56]	; (8000398 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000360:	4a0e      	ldr	r2, [pc, #56]	; (800039c <LoopForever+0xe>)
  movs r3, #0
 8000362:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000364:	e002      	b.n	800036c <LoopCopyDataInit>

08000366 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000366:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000368:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800036a:	3304      	adds	r3, #4

0800036c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800036c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800036e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000370:	d3f9      	bcc.n	8000366 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000372:	4a0b      	ldr	r2, [pc, #44]	; (80003a0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000374:	4c0b      	ldr	r4, [pc, #44]	; (80003a4 <LoopForever+0x16>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000378:	e001      	b.n	800037e <LoopFillZerobss>

0800037a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800037a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800037c:	3204      	adds	r2, #4

0800037e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800037e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000380:	d3fb      	bcc.n	800037a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000382:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000386:	f000 fd6b 	bl	8000e60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800038a:	f7ff ffbf 	bl	800030c <main>

0800038e <LoopForever>:

LoopForever:
    b LoopForever
 800038e:	e7fe      	b.n	800038e <LoopForever>
  ldr   r0, =_estack
 8000390:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000394:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000398:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 800039c:	08000ed8 	.word	0x08000ed8
  ldr r2, =_sbss
 80003a0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003a4:	20000044 	.word	0x20000044

080003a8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003a8:	e7fe      	b.n	80003a8 <ADC_IRQHandler>
	...

080003ac <GPIO_PeriClockControl>:
 * @return			- none
 *
 * @Note			- none
 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003ac:	b480      	push	{r7}
 80003ae:	b083      	sub	sp, #12
 80003b0:	af00      	add	r7, sp, #0
 80003b2:	6078      	str	r0, [r7, #4]
 80003b4:	460b      	mov	r3, r1
 80003b6:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003b8:	78fb      	ldrb	r3, [r7, #3]
 80003ba:	2b01      	cmp	r3, #1
 80003bc:	d157      	bne.n	800046e <GPIO_PeriClockControl+0xc2>
	{
		if(pGPIOx == GPIOA)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4a59      	ldr	r2, [pc, #356]	; (8000528 <GPIO_PeriClockControl+0x17c>)
 80003c2:	4293      	cmp	r3, r2
 80003c4:	d106      	bne.n	80003d4 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 80003c6:	4b59      	ldr	r3, [pc, #356]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003ca:	4a58      	ldr	r2, [pc, #352]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003cc:	f043 0301 	orr.w	r3, r3, #1
 80003d0:	6313      	str	r3, [r2, #48]	; 0x30
		{
			GPIOH_PCLK_DI();
		}

	}
}
 80003d2:	e0a3      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	4a56      	ldr	r2, [pc, #344]	; (8000530 <GPIO_PeriClockControl+0x184>)
 80003d8:	4293      	cmp	r3, r2
 80003da:	d106      	bne.n	80003ea <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 80003dc:	4b53      	ldr	r3, [pc, #332]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003e0:	4a52      	ldr	r2, [pc, #328]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003e2:	f043 0302 	orr.w	r3, r3, #2
 80003e6:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003e8:	e098      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	4a51      	ldr	r2, [pc, #324]	; (8000534 <GPIO_PeriClockControl+0x188>)
 80003ee:	4293      	cmp	r3, r2
 80003f0:	d106      	bne.n	8000400 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 80003f2:	4b4e      	ldr	r3, [pc, #312]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003f6:	4a4d      	ldr	r2, [pc, #308]	; (800052c <GPIO_PeriClockControl+0x180>)
 80003f8:	f043 0304 	orr.w	r3, r3, #4
 80003fc:	6313      	str	r3, [r2, #48]	; 0x30
}
 80003fe:	e08d      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	4a4d      	ldr	r2, [pc, #308]	; (8000538 <GPIO_PeriClockControl+0x18c>)
 8000404:	4293      	cmp	r3, r2
 8000406:	d106      	bne.n	8000416 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000408:	4b48      	ldr	r3, [pc, #288]	; (800052c <GPIO_PeriClockControl+0x180>)
 800040a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800040c:	4a47      	ldr	r2, [pc, #284]	; (800052c <GPIO_PeriClockControl+0x180>)
 800040e:	f043 0308 	orr.w	r3, r3, #8
 8000412:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000414:	e082      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	4a48      	ldr	r2, [pc, #288]	; (800053c <GPIO_PeriClockControl+0x190>)
 800041a:	4293      	cmp	r3, r2
 800041c:	d106      	bne.n	800042c <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800041e:	4b43      	ldr	r3, [pc, #268]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000422:	4a42      	ldr	r2, [pc, #264]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000424:	f043 0310 	orr.w	r3, r3, #16
 8000428:	6313      	str	r3, [r2, #48]	; 0x30
}
 800042a:	e077      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	4a44      	ldr	r2, [pc, #272]	; (8000540 <GPIO_PeriClockControl+0x194>)
 8000430:	4293      	cmp	r3, r2
 8000432:	d106      	bne.n	8000442 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000434:	4b3d      	ldr	r3, [pc, #244]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000438:	4a3c      	ldr	r2, [pc, #240]	; (800052c <GPIO_PeriClockControl+0x180>)
 800043a:	f043 0320 	orr.w	r3, r3, #32
 800043e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000440:	e06c      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 8000442:	687b      	ldr	r3, [r7, #4]
 8000444:	4a3f      	ldr	r2, [pc, #252]	; (8000544 <GPIO_PeriClockControl+0x198>)
 8000446:	4293      	cmp	r3, r2
 8000448:	d106      	bne.n	8000458 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 800044a:	4b38      	ldr	r3, [pc, #224]	; (800052c <GPIO_PeriClockControl+0x180>)
 800044c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800044e:	4a37      	ldr	r2, [pc, #220]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000454:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000456:	e061      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	4a3b      	ldr	r2, [pc, #236]	; (8000548 <GPIO_PeriClockControl+0x19c>)
 800045c:	4293      	cmp	r3, r2
 800045e:	d15d      	bne.n	800051c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_EN();
 8000460:	4b32      	ldr	r3, [pc, #200]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000464:	4a31      	ldr	r2, [pc, #196]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000466:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800046a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800046c:	e056      	b.n	800051c <GPIO_PeriClockControl+0x170>
		if(pGPIOx == GPIOA)
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4a2d      	ldr	r2, [pc, #180]	; (8000528 <GPIO_PeriClockControl+0x17c>)
 8000472:	4293      	cmp	r3, r2
 8000474:	d106      	bne.n	8000484 <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 8000476:	4b2d      	ldr	r3, [pc, #180]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800047a:	4a2c      	ldr	r2, [pc, #176]	; (800052c <GPIO_PeriClockControl+0x180>)
 800047c:	f023 0301 	bic.w	r3, r3, #1
 8000480:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000482:	e04b      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOB)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	4a2a      	ldr	r2, [pc, #168]	; (8000530 <GPIO_PeriClockControl+0x184>)
 8000488:	4293      	cmp	r3, r2
 800048a:	d106      	bne.n	800049a <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 800048c:	4b27      	ldr	r3, [pc, #156]	; (800052c <GPIO_PeriClockControl+0x180>)
 800048e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000492:	f023 0302 	bic.w	r3, r3, #2
 8000496:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000498:	e040      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOC)
 800049a:	687b      	ldr	r3, [r7, #4]
 800049c:	4a25      	ldr	r2, [pc, #148]	; (8000534 <GPIO_PeriClockControl+0x188>)
 800049e:	4293      	cmp	r3, r2
 80004a0:	d106      	bne.n	80004b0 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 80004a2:	4b22      	ldr	r3, [pc, #136]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004a6:	4a21      	ldr	r2, [pc, #132]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004a8:	f023 0304 	bic.w	r3, r3, #4
 80004ac:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004ae:	e035      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOD)
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	4a21      	ldr	r2, [pc, #132]	; (8000538 <GPIO_PeriClockControl+0x18c>)
 80004b4:	4293      	cmp	r3, r2
 80004b6:	d106      	bne.n	80004c6 <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 80004b8:	4b1c      	ldr	r3, [pc, #112]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004bc:	4a1b      	ldr	r2, [pc, #108]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004be:	f023 0308 	bic.w	r3, r3, #8
 80004c2:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004c4:	e02a      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOE)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	4a1c      	ldr	r2, [pc, #112]	; (800053c <GPIO_PeriClockControl+0x190>)
 80004ca:	4293      	cmp	r3, r2
 80004cc:	d106      	bne.n	80004dc <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 80004ce:	4b17      	ldr	r3, [pc, #92]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004d2:	4a16      	ldr	r2, [pc, #88]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004d4:	f023 0310 	bic.w	r3, r3, #16
 80004d8:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004da:	e01f      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOF)
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	4a18      	ldr	r2, [pc, #96]	; (8000540 <GPIO_PeriClockControl+0x194>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d106      	bne.n	80004f2 <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 80004e4:	4b11      	ldr	r3, [pc, #68]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004e8:	4a10      	ldr	r2, [pc, #64]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004ea:	f023 0320 	bic.w	r3, r3, #32
 80004ee:	6313      	str	r3, [r2, #48]	; 0x30
}
 80004f0:	e014      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOG)
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	4a13      	ldr	r2, [pc, #76]	; (8000544 <GPIO_PeriClockControl+0x198>)
 80004f6:	4293      	cmp	r3, r2
 80004f8:	d106      	bne.n	8000508 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 80004fa:	4b0c      	ldr	r3, [pc, #48]	; (800052c <GPIO_PeriClockControl+0x180>)
 80004fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004fe:	4a0b      	ldr	r2, [pc, #44]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000500:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000504:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000506:	e009      	b.n	800051c <GPIO_PeriClockControl+0x170>
		else if(pGPIOx == GPIOH)
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <GPIO_PeriClockControl+0x19c>)
 800050c:	4293      	cmp	r3, r2
 800050e:	d105      	bne.n	800051c <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000510:	4b06      	ldr	r3, [pc, #24]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000514:	4a05      	ldr	r2, [pc, #20]	; (800052c <GPIO_PeriClockControl+0x180>)
 8000516:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800051a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800051c:	bf00      	nop
 800051e:	370c      	adds	r7, #12
 8000520:	46bd      	mov	sp, r7
 8000522:	bc80      	pop	{r7}
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	40020000 	.word	0x40020000
 800052c:	40023800 	.word	0x40023800
 8000530:	40020400 	.word	0x40020400
 8000534:	40020800 	.word	0x40020800
 8000538:	40020c00 	.word	0x40020c00
 800053c:	40021000 	.word	0x40021000
 8000540:	40021400 	.word	0x40021400
 8000544:	40021800 	.word	0x40021800
 8000548:	40021c00 	.word	0x40021c00

0800054c <GPIO_Init>:
 * @return			- none
 *
 * @Note			- none
 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b086      	sub	sp, #24
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
	uint32_t temp=0;
 8000554:	2300      	movs	r3, #0
 8000556:	617b      	str	r3, [r7, #20]

	//Enable the GPIO Peripheral clock
	GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2101      	movs	r1, #1
 800055e:	4618      	mov	r0, r3
 8000560:	f7ff ff24 	bl	80003ac <GPIO_PeriClockControl>
	//1. configure the mode of gpio pin
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG) //Which means it is working in non-interrupt mode
 8000564:	687b      	ldr	r3, [r7, #4]
 8000566:	795b      	ldrb	r3, [r3, #5]
 8000568:	2b03      	cmp	r3, #3
 800056a:	d820      	bhi.n	80005ae <GPIO_Init+0x62>
	{
		//the non-interrupt mode
		temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Each pin takes 2 bit fields in the GPIO mode register. That's why pinNumber is multiplied by 2
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	795b      	ldrb	r3, [r3, #5]
 8000570:	461a      	mov	r2, r3
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	791b      	ldrb	r3, [r3, #4]
 8000576:	005b      	lsls	r3, r3, #1
 8000578:	fa02 f303 	lsl.w	r3, r2, r3
 800057c:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing. Note: 0x3 corresponds to 1 in binary, thus clears those two fields only
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681a      	ldr	r2, [r3, #0]
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	791b      	ldrb	r3, [r3, #4]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2103      	movs	r1, #3
 800058c:	fa01 f303 	lsl.w	r3, r1, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	4619      	mov	r1, r3
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	400a      	ands	r2, r1
 800059a:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	6819      	ldr	r1, [r3, #0]
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	697a      	ldr	r2, [r7, #20]
 80005a8:	430a      	orrs	r2, r1
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	e0c1      	b.n	8000732 <GPIO_Init+0x1e6>
	}
	else
	{
		// This is the interrupt mode

		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 80005ae:	687b      	ldr	r3, [r7, #4]
 80005b0:	795b      	ldrb	r3, [r3, #5]
 80005b2:	2b04      	cmp	r3, #4
 80005b4:	d117      	bne.n	80005e6 <GPIO_Init+0x9a>
		{
			//1. Configure the Falling Trigger Selection Register (FTSR)
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b6:	4b47      	ldr	r3, [pc, #284]	; (80006d4 <GPIO_Init+0x188>)
 80005b8:	68db      	ldr	r3, [r3, #12]
 80005ba:	687a      	ldr	r2, [r7, #4]
 80005bc:	7912      	ldrb	r2, [r2, #4]
 80005be:	4611      	mov	r1, r2
 80005c0:	2201      	movs	r2, #1
 80005c2:	408a      	lsls	r2, r1
 80005c4:	4611      	mov	r1, r2
 80005c6:	4a43      	ldr	r2, [pc, #268]	; (80006d4 <GPIO_Init+0x188>)
 80005c8:	430b      	orrs	r3, r1
 80005ca:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005cc:	4b41      	ldr	r3, [pc, #260]	; (80006d4 <GPIO_Init+0x188>)
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	687a      	ldr	r2, [r7, #4]
 80005d2:	7912      	ldrb	r2, [r2, #4]
 80005d4:	4611      	mov	r1, r2
 80005d6:	2201      	movs	r2, #1
 80005d8:	408a      	lsls	r2, r1
 80005da:	43d2      	mvns	r2, r2
 80005dc:	4611      	mov	r1, r2
 80005de:	4a3d      	ldr	r2, [pc, #244]	; (80006d4 <GPIO_Init+0x188>)
 80005e0:	400b      	ands	r3, r1
 80005e2:	6093      	str	r3, [r2, #8]
 80005e4:	e035      	b.n	8000652 <GPIO_Init+0x106>

		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	795b      	ldrb	r3, [r3, #5]
 80005ea:	2b05      	cmp	r3, #5
 80005ec:	d117      	bne.n	800061e <GPIO_Init+0xd2>
		{
			//1. Configure the Rising Trigger Selection Register (RTSR)
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005ee:	4b39      	ldr	r3, [pc, #228]	; (80006d4 <GPIO_Init+0x188>)
 80005f0:	689b      	ldr	r3, [r3, #8]
 80005f2:	687a      	ldr	r2, [r7, #4]
 80005f4:	7912      	ldrb	r2, [r2, #4]
 80005f6:	4611      	mov	r1, r2
 80005f8:	2201      	movs	r2, #1
 80005fa:	408a      	lsls	r2, r1
 80005fc:	4611      	mov	r1, r2
 80005fe:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <GPIO_Init+0x188>)
 8000600:	430b      	orrs	r3, r1
 8000602:	6093      	str	r3, [r2, #8]
			//Clear the corresponding FTSR bit
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000604:	4b33      	ldr	r3, [pc, #204]	; (80006d4 <GPIO_Init+0x188>)
 8000606:	68db      	ldr	r3, [r3, #12]
 8000608:	687a      	ldr	r2, [r7, #4]
 800060a:	7912      	ldrb	r2, [r2, #4]
 800060c:	4611      	mov	r1, r2
 800060e:	2201      	movs	r2, #1
 8000610:	408a      	lsls	r2, r1
 8000612:	43d2      	mvns	r2, r2
 8000614:	4611      	mov	r1, r2
 8000616:	4a2f      	ldr	r2, [pc, #188]	; (80006d4 <GPIO_Init+0x188>)
 8000618:	400b      	ands	r3, r1
 800061a:	60d3      	str	r3, [r2, #12]
 800061c:	e019      	b.n	8000652 <GPIO_Init+0x106>


		}

		else if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	795b      	ldrb	r3, [r3, #5]
 8000622:	2b06      	cmp	r3, #6
 8000624:	d115      	bne.n	8000652 <GPIO_Init+0x106>
		{
			//1. Configure both FTSR and RTSR
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <GPIO_Init+0x188>)
 8000628:	68db      	ldr	r3, [r3, #12]
 800062a:	687a      	ldr	r2, [r7, #4]
 800062c:	7912      	ldrb	r2, [r2, #4]
 800062e:	4611      	mov	r1, r2
 8000630:	2201      	movs	r2, #1
 8000632:	408a      	lsls	r2, r1
 8000634:	4611      	mov	r1, r2
 8000636:	4a27      	ldr	r2, [pc, #156]	; (80006d4 <GPIO_Init+0x188>)
 8000638:	430b      	orrs	r3, r1
 800063a:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800063c:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <GPIO_Init+0x188>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	7912      	ldrb	r2, [r2, #4]
 8000644:	4611      	mov	r1, r2
 8000646:	2201      	movs	r2, #1
 8000648:	408a      	lsls	r2, r1
 800064a:	4611      	mov	r1, r2
 800064c:	4a21      	ldr	r2, [pc, #132]	; (80006d4 <GPIO_Init+0x188>)
 800064e:	430b      	orrs	r3, r1
 8000650:	6093      	str	r3, [r2, #8]
		}

		//2. Configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	791b      	ldrb	r3, [r3, #4]
 8000656:	089b      	lsrs	r3, r3, #2
 8000658:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	f003 0303 	and.w	r3, r3, #3
 8000662:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a1b      	ldr	r2, [pc, #108]	; (80006d8 <GPIO_Init+0x18c>)
 800066a:	4293      	cmp	r3, r2
 800066c:	d044      	beq.n	80006f8 <GPIO_Init+0x1ac>
 800066e:	687b      	ldr	r3, [r7, #4]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	4a1a      	ldr	r2, [pc, #104]	; (80006dc <GPIO_Init+0x190>)
 8000674:	4293      	cmp	r3, r2
 8000676:	d02b      	beq.n	80006d0 <GPIO_Init+0x184>
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a18      	ldr	r2, [pc, #96]	; (80006e0 <GPIO_Init+0x194>)
 800067e:	4293      	cmp	r3, r2
 8000680:	d024      	beq.n	80006cc <GPIO_Init+0x180>
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	4a17      	ldr	r2, [pc, #92]	; (80006e4 <GPIO_Init+0x198>)
 8000688:	4293      	cmp	r3, r2
 800068a:	d01d      	beq.n	80006c8 <GPIO_Init+0x17c>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a15      	ldr	r2, [pc, #84]	; (80006e8 <GPIO_Init+0x19c>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d016      	beq.n	80006c4 <GPIO_Init+0x178>
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a14      	ldr	r2, [pc, #80]	; (80006ec <GPIO_Init+0x1a0>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d00f      	beq.n	80006c0 <GPIO_Init+0x174>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <GPIO_Init+0x1a4>)
 80006a6:	4293      	cmp	r3, r2
 80006a8:	d008      	beq.n	80006bc <GPIO_Init+0x170>
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <GPIO_Init+0x1a8>)
 80006b0:	4293      	cmp	r3, r2
 80006b2:	d101      	bne.n	80006b8 <GPIO_Init+0x16c>
 80006b4:	2307      	movs	r3, #7
 80006b6:	e020      	b.n	80006fa <GPIO_Init+0x1ae>
 80006b8:	2300      	movs	r3, #0
 80006ba:	e01e      	b.n	80006fa <GPIO_Init+0x1ae>
 80006bc:	2306      	movs	r3, #6
 80006be:	e01c      	b.n	80006fa <GPIO_Init+0x1ae>
 80006c0:	2305      	movs	r3, #5
 80006c2:	e01a      	b.n	80006fa <GPIO_Init+0x1ae>
 80006c4:	2304      	movs	r3, #4
 80006c6:	e018      	b.n	80006fa <GPIO_Init+0x1ae>
 80006c8:	2303      	movs	r3, #3
 80006ca:	e016      	b.n	80006fa <GPIO_Init+0x1ae>
 80006cc:	2302      	movs	r3, #2
 80006ce:	e014      	b.n	80006fa <GPIO_Init+0x1ae>
 80006d0:	2301      	movs	r3, #1
 80006d2:	e012      	b.n	80006fa <GPIO_Init+0x1ae>
 80006d4:	40013c00 	.word	0x40013c00
 80006d8:	40020000 	.word	0x40020000
 80006dc:	40020400 	.word	0x40020400
 80006e0:	40020800 	.word	0x40020800
 80006e4:	40020c00 	.word	0x40020c00
 80006e8:	40021000 	.word	0x40021000
 80006ec:	40021400 	.word	0x40021400
 80006f0:	40021800 	.word	0x40021800
 80006f4:	40021c00 	.word	0x40021c00
 80006f8:	2300      	movs	r3, #0
 80006fa:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80006fc:	4b5d      	ldr	r3, [pc, #372]	; (8000874 <GPIO_Init+0x328>)
 80006fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000700:	4a5c      	ldr	r2, [pc, #368]	; (8000874 <GPIO_Init+0x328>)
 8000702:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000706:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] = portcode << (temp2 * 4);
 8000708:	7c7a      	ldrb	r2, [r7, #17]
 800070a:	7cbb      	ldrb	r3, [r7, #18]
 800070c:	009b      	lsls	r3, r3, #2
 800070e:	fa02 f103 	lsl.w	r1, r2, r3
 8000712:	4a59      	ldr	r2, [pc, #356]	; (8000878 <GPIO_Init+0x32c>)
 8000714:	7cfb      	ldrb	r3, [r7, #19]
 8000716:	3302      	adds	r3, #2
 8000718:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3. Enable the EXTI interrupt delivery using IMR (Interrupt mask register)
		EXTI->IMR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800071c:	4b57      	ldr	r3, [pc, #348]	; (800087c <GPIO_Init+0x330>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	687a      	ldr	r2, [r7, #4]
 8000722:	7912      	ldrb	r2, [r2, #4]
 8000724:	4611      	mov	r1, r2
 8000726:	2201      	movs	r2, #1
 8000728:	408a      	lsls	r2, r1
 800072a:	4611      	mov	r1, r2
 800072c:	4a53      	ldr	r2, [pc, #332]	; (800087c <GPIO_Init+0x330>)
 800072e:	430b      	orrs	r3, r1
 8000730:	6013      	str	r3, [r2, #0]
	  }

	temp = 0;
 8000732:	2300      	movs	r3, #0
 8000734:	617b      	str	r3, [r7, #20]
	//2. Configure the speed
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	799b      	ldrb	r3, [r3, #6]
 800073a:	461a      	mov	r2, r3
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	791b      	ldrb	r3, [r3, #4]
 8000740:	005b      	lsls	r3, r3, #1
 8000742:	fa02 f303 	lsl.w	r3, r2, r3
 8000746:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //Clearing
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	689a      	ldr	r2, [r3, #8]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	791b      	ldrb	r3, [r3, #4]
 8000752:	005b      	lsls	r3, r3, #1
 8000754:	2103      	movs	r1, #3
 8000756:	fa01 f303 	lsl.w	r3, r1, r3
 800075a:	43db      	mvns	r3, r3
 800075c:	4619      	mov	r1, r3
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	400a      	ands	r2, r1
 8000764:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp; //Setting
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6899      	ldr	r1, [r3, #8]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	697a      	ldr	r2, [r7, #20]
 8000772:	430a      	orrs	r2, r1
 8000774:	609a      	str	r2, [r3, #8]

	temp=0;
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
	//3. configure the pupd settings
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinPupdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	79db      	ldrb	r3, [r3, #7]
 800077e:	461a      	mov	r2, r3
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	791b      	ldrb	r3, [r3, #4]
 8000784:	005b      	lsls	r3, r3, #1
 8000786:	fa02 f303 	lsl.w	r3, r2, r3
 800078a:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	681b      	ldr	r3, [r3, #0]
 8000790:	68da      	ldr	r2, [r3, #12]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	791b      	ldrb	r3, [r3, #4]
 8000796:	005b      	lsls	r3, r3, #1
 8000798:	2103      	movs	r1, #3
 800079a:	fa01 f303 	lsl.w	r3, r1, r3
 800079e:	43db      	mvns	r3, r3
 80007a0:	4619      	mov	r1, r3
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	400a      	ands	r2, r1
 80007a8:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	68d9      	ldr	r1, [r3, #12]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	697a      	ldr	r2, [r7, #20]
 80007b6:	430a      	orrs	r2, r1
 80007b8:	60da      	str	r2, [r3, #12]

	temp=0;
 80007ba:	2300      	movs	r3, #0
 80007bc:	617b      	str	r3, [r7, #20]
	//4. configure the output type
	temp = pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //Each pin takes 1 bit field in the register
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	7a1b      	ldrb	r3, [r3, #8]
 80007c2:	461a      	mov	r2, r3
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	791b      	ldrb	r3, [r3, #4]
 80007c8:	fa02 f303 	lsl.w	r3, r2, r3
 80007cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (1 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	685a      	ldr	r2, [r3, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	791b      	ldrb	r3, [r3, #4]
 80007d8:	4619      	mov	r1, r3
 80007da:	2301      	movs	r3, #1
 80007dc:	408b      	lsls	r3, r1
 80007de:	43db      	mvns	r3, r3
 80007e0:	4619      	mov	r1, r3
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	681b      	ldr	r3, [r3, #0]
 80007e6:	400a      	ands	r2, r1
 80007e8:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6859      	ldr	r1, [r3, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	697a      	ldr	r2, [r7, #20]
 80007f6:	430a      	orrs	r2, r1
 80007f8:	605a      	str	r2, [r3, #4]

	temp=0;
 80007fa:	2300      	movs	r3, #0
 80007fc:	617b      	str	r3, [r7, #20]

	//5. configure the alternate functionality: There are two alternate function registers, low and high i.e AFR[0] and AFR[1] respectively
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	795b      	ldrb	r3, [r3, #5]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d131      	bne.n	800086a <GPIO_Init+0x31e>
	{
		//configure the alternate function registers
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8; //This is an integer division and is used to decide whether the low register or high register needs to be selected based on the pin number
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	791b      	ldrb	r3, [r3, #4]
 800080a:	08db      	lsrs	r3, r3, #3
 800080c:	743b      	strb	r3, [r7, #16]

		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8; //This is modulo operation and is used to select which particular section (4 bits) of the 32 bit register needs to be written into
 800080e:	687b      	ldr	r3, [r7, #4]
 8000810:	791b      	ldrb	r3, [r3, #4]
 8000812:	f003 0307 	and.w	r3, r3, #7
 8000816:	73fb      	strb	r3, [r7, #15]

		//E.g 8/8 = 1 and 8%8 =0, therefore, value needs to be written into high register (result of '/' operation) and in the 0th section (the first 4 bits)
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	7c3a      	ldrb	r2, [r7, #16]
 800081e:	3208      	adds	r2, #8
 8000820:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000824:	7bfb      	ldrb	r3, [r7, #15]
 8000826:	009b      	lsls	r3, r3, #2
 8000828:	220f      	movs	r2, #15
 800082a:	fa02 f303 	lsl.w	r3, r2, r3
 800082e:	43db      	mvns	r3, r3
 8000830:	4618      	mov	r0, r3
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	7c3a      	ldrb	r2, [r7, #16]
 8000838:	4001      	ands	r1, r0
 800083a:	3208      	adds	r2, #8
 800083c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2);
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	7c3a      	ldrb	r2, [r7, #16]
 8000846:	3208      	adds	r2, #8
 8000848:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	7a5b      	ldrb	r3, [r3, #9]
 8000850:	461a      	mov	r2, r3
 8000852:	7bfb      	ldrb	r3, [r7, #15]
 8000854:	009b      	lsls	r3, r3, #2
 8000856:	fa02 f303 	lsl.w	r3, r2, r3
 800085a:	4618      	mov	r0, r3
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	7c3a      	ldrb	r2, [r7, #16]
 8000862:	4301      	orrs	r1, r0
 8000864:	3208      	adds	r2, #8
 8000866:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	40023800 	.word	0x40023800
 8000878:	40013800 	.word	0x40013800
 800087c:	40013c00 	.word	0x40013c00

08000880 <GPIO_ReadFromInputPin>:
/*
 * Data read and write
 */

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000880:	b480      	push	{r7}
 8000882:	b085      	sub	sp, #20
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	460b      	mov	r3, r1
 800088a:	70fb      	strb	r3, [r7, #3]
	uint8_t value;

	value = (uint8_t)((pGPIOx->IDR >> PinNumber) & 0x00000001) ;
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	691a      	ldr	r2, [r3, #16]
 8000890:	78fb      	ldrb	r3, [r7, #3]
 8000892:	fa22 f303 	lsr.w	r3, r2, r3
 8000896:	b2db      	uxtb	r3, r3
 8000898:	f003 0301 	and.w	r3, r3, #1
 800089c:	73fb      	strb	r3, [r7, #15]

	return value;
 800089e:	7bfb      	ldrb	r3, [r7, #15]

}
 80008a0:	4618      	mov	r0, r3
 80008a2:	3714      	adds	r7, #20
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bc80      	pop	{r7}
 80008a8:	4770      	bx	lr
	...

080008ac <RCC_GetPCLK1Value>:
uint16_t AHB_PreScaler[8] = {2,4,8,16,64,128,256,512};
uint8_t APB1_PreScaler[4] = {2,4,8,16};
uint8_t APB2_PreScaler[4] = {2,4,8,16};

uint32_t RCC_GetPCLK1Value(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b084      	sub	sp, #16
 80008b0:	af00      	add	r7, sp, #0

	//1. Obtain system clk value
	//Refer to RCC_CFGR in reference manual to obtain more info
	//SWS[1:0] (System clock switch status): Indicates which clock source is as the system clock

	clksrc = (RCC->CFGR >> 2) & 0x3; //obtain values of bit number 2 and 3
 80008b2:	4b26      	ldr	r3, [pc, #152]	; (800094c <RCC_GetPCLK1Value+0xa0>)
 80008b4:	689b      	ldr	r3, [r3, #8]
 80008b6:	089b      	lsrs	r3, r3, #2
 80008b8:	b2db      	uxtb	r3, r3
 80008ba:	f003 0303 	and.w	r3, r3, #3
 80008be:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 80008c0:	7a7b      	ldrb	r3, [r7, #9]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d102      	bne.n	80008cc <RCC_GetPCLK1Value+0x20>
	{
		SystemClk = 16000000; //Internal clock source is of 16MHz
 80008c6:	4b22      	ldr	r3, [pc, #136]	; (8000950 <RCC_GetPCLK1Value+0xa4>)
 80008c8:	60fb      	str	r3, [r7, #12]
 80008ca:	e00b      	b.n	80008e4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 1)
 80008cc:	7a7b      	ldrb	r3, [r7, #9]
 80008ce:	2b01      	cmp	r3, #1
 80008d0:	d102      	bne.n	80008d8 <RCC_GetPCLK1Value+0x2c>
	{
		SystemClk = 8000000; //External clock frequency in case of Nucleo boards comes from STLink circuitry, which is 8MHz
 80008d2:	4b20      	ldr	r3, [pc, #128]	; (8000954 <RCC_GetPCLK1Value+0xa8>)
 80008d4:	60fb      	str	r3, [r7, #12]
 80008d6:	e005      	b.n	80008e4 <RCC_GetPCLK1Value+0x38>
	}
	else if(clksrc == 2)
 80008d8:	7a7b      	ldrb	r3, [r7, #9]
 80008da:	2b02      	cmp	r3, #2
 80008dc:	d102      	bne.n	80008e4 <RCC_GetPCLK1Value+0x38>
	{
		SystemClk = RCC_GetPLLClockOutput();
 80008de:	f000 f899 	bl	8000a14 <RCC_GetPLLClockOutput>
 80008e2:	60f8      	str	r0, [r7, #12]
	}

	//2. Obtain AHB pre-scalar value
	//Refer to HPRE bit fields in RCC_CFGR register
	temp = (RCC->CFGR >> 4) & 0xF; //Obtain HPRE value by masking
 80008e4:	4b19      	ldr	r3, [pc, #100]	; (800094c <RCC_GetPCLK1Value+0xa0>)
 80008e6:	689b      	ldr	r3, [r3, #8]
 80008e8:	091b      	lsrs	r3, r3, #4
 80008ea:	b2db      	uxtb	r3, r3
 80008ec:	f003 030f 	and.w	r3, r3, #15
 80008f0:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80008f2:	7a3b      	ldrb	r3, [r7, #8]
 80008f4:	2b07      	cmp	r3, #7
 80008f6:	d802      	bhi.n	80008fe <RCC_GetPCLK1Value+0x52>
	{
		ahbp = 1; //NO division
 80008f8:	2301      	movs	r3, #1
 80008fa:	72fb      	strb	r3, [r7, #11]
 80008fc:	e005      	b.n	800090a <RCC_GetPCLK1Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8]; //use temp (which is greater than 8) as index to obtain ahb pre-scaler value from array
 80008fe:	7a3b      	ldrb	r3, [r7, #8]
 8000900:	3b08      	subs	r3, #8
 8000902:	4a15      	ldr	r2, [pc, #84]	; (8000958 <RCC_GetPCLK1Value+0xac>)
 8000904:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000908:	72fb      	strb	r3, [r7, #11]
	}

	//3. Obtain the APB1 pre-scalar
	//Refer to the PPRE bit fields in RCC_CFGR register
	temp = (RCC->CFGR >> 10) & 0x7;
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <RCC_GetPCLK1Value+0xa0>)
 800090c:	689b      	ldr	r3, [r3, #8]
 800090e:	0a9b      	lsrs	r3, r3, #10
 8000910:	b2db      	uxtb	r3, r3
 8000912:	f003 0307 	and.w	r3, r3, #7
 8000916:	723b      	strb	r3, [r7, #8]

	if(temp<7)
 8000918:	7a3b      	ldrb	r3, [r7, #8]
 800091a:	2b06      	cmp	r3, #6
 800091c:	d802      	bhi.n	8000924 <RCC_GetPCLK1Value+0x78>
	{
		apb1p = 1;
 800091e:	2301      	movs	r3, #1
 8000920:	72bb      	strb	r3, [r7, #10]
 8000922:	e004      	b.n	800092e <RCC_GetPCLK1Value+0x82>
	}
	else
	{
		apb1p = APB1_PreScaler[temp - 4];
 8000924:	7a3b      	ldrb	r3, [r7, #8]
 8000926:	3b04      	subs	r3, #4
 8000928:	4a0c      	ldr	r2, [pc, #48]	; (800095c <RCC_GetPCLK1Value+0xb0>)
 800092a:	5cd3      	ldrb	r3, [r2, r3]
 800092c:	72bb      	strb	r3, [r7, #10]
	}

	//4. Calculate the value of pclk1
	pclk1 = SystemClk / (apb1p * ahbp);
 800092e:	7abb      	ldrb	r3, [r7, #10]
 8000930:	7afa      	ldrb	r2, [r7, #11]
 8000932:	fb02 f303 	mul.w	r3, r2, r3
 8000936:	461a      	mov	r2, r3
 8000938:	68fb      	ldr	r3, [r7, #12]
 800093a:	fbb3 f3f2 	udiv	r3, r3, r2
 800093e:	607b      	str	r3, [r7, #4]
	return pclk1;
 8000940:	687b      	ldr	r3, [r7, #4]
}
 8000942:	4618      	mov	r0, r3
 8000944:	3710      	adds	r7, #16
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	40023800 	.word	0x40023800
 8000950:	00f42400 	.word	0x00f42400
 8000954:	007a1200 	.word	0x007a1200
 8000958:	20000000 	.word	0x20000000
 800095c:	20000010 	.word	0x20000010

08000960 <RCC_GetPCLK2Value>:

uint32_t RCC_GetPCLK2Value(void)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0

	//1. Obtain system clk value
	//Refer to RCC_CFGR in reference manual to obtain more info
	//SWS[1:0] (System clock switch status): Indicates which clock source is as the system clock

	clksrc = (RCC->CFGR >> 2) & 0x3; //obtain values of bit number 2 and 3
 8000966:	4b26      	ldr	r3, [pc, #152]	; (8000a00 <RCC_GetPCLK2Value+0xa0>)
 8000968:	689b      	ldr	r3, [r3, #8]
 800096a:	089b      	lsrs	r3, r3, #2
 800096c:	b2db      	uxtb	r3, r3
 800096e:	f003 0303 	and.w	r3, r3, #3
 8000972:	727b      	strb	r3, [r7, #9]
	if(clksrc == 0)
 8000974:	7a7b      	ldrb	r3, [r7, #9]
 8000976:	2b00      	cmp	r3, #0
 8000978:	d102      	bne.n	8000980 <RCC_GetPCLK2Value+0x20>
	{
		SystemClk = 16000000; //Internal clock source is of 16MHz
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <RCC_GetPCLK2Value+0xa4>)
 800097c:	60fb      	str	r3, [r7, #12]
 800097e:	e00b      	b.n	8000998 <RCC_GetPCLK2Value+0x38>
	}
	else if(clksrc == 1)
 8000980:	7a7b      	ldrb	r3, [r7, #9]
 8000982:	2b01      	cmp	r3, #1
 8000984:	d102      	bne.n	800098c <RCC_GetPCLK2Value+0x2c>
	{
		SystemClk = 8000000; //External clock frequency in case of Nucleo boards comes from STLink circuitry, which is 8MHz
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <RCC_GetPCLK2Value+0xa8>)
 8000988:	60fb      	str	r3, [r7, #12]
 800098a:	e005      	b.n	8000998 <RCC_GetPCLK2Value+0x38>
	}
	else if(clksrc == 2)
 800098c:	7a7b      	ldrb	r3, [r7, #9]
 800098e:	2b02      	cmp	r3, #2
 8000990:	d102      	bne.n	8000998 <RCC_GetPCLK2Value+0x38>
	{
		SystemClk = RCC_GetPLLClockOutput();
 8000992:	f000 f83f 	bl	8000a14 <RCC_GetPLLClockOutput>
 8000996:	60f8      	str	r0, [r7, #12]
	}

	//2. Obtain AHB pre-scalar value
	//Refer to HPRE bit fields in RCC_CFGR register
	temp = (RCC->CFGR >> 4) & 0xF; //Obtain HPRE value by masking
 8000998:	4b19      	ldr	r3, [pc, #100]	; (8000a00 <RCC_GetPCLK2Value+0xa0>)
 800099a:	689b      	ldr	r3, [r3, #8]
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	b2db      	uxtb	r3, r3
 80009a0:	f003 030f 	and.w	r3, r3, #15
 80009a4:	723b      	strb	r3, [r7, #8]
	if(temp < 8)
 80009a6:	7a3b      	ldrb	r3, [r7, #8]
 80009a8:	2b07      	cmp	r3, #7
 80009aa:	d802      	bhi.n	80009b2 <RCC_GetPCLK2Value+0x52>
	{
		ahbp = 1; //NO division
 80009ac:	2301      	movs	r3, #1
 80009ae:	72fb      	strb	r3, [r7, #11]
 80009b0:	e005      	b.n	80009be <RCC_GetPCLK2Value+0x5e>
	}
	else
	{
		ahbp = AHB_PreScaler[temp-8]; //use temp (which is greater than 8) as index to obtain ahb pre-scaler value from array
 80009b2:	7a3b      	ldrb	r3, [r7, #8]
 80009b4:	3b08      	subs	r3, #8
 80009b6:	4a15      	ldr	r2, [pc, #84]	; (8000a0c <RCC_GetPCLK2Value+0xac>)
 80009b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009bc:	72fb      	strb	r3, [r7, #11]
	}

	//3. Obtain the APB1 pre-scalar
	//Refer to the PPRE bit fields in RCC_CFGR register
	temp = (RCC->CFGR >> 10) & 0x7;
 80009be:	4b10      	ldr	r3, [pc, #64]	; (8000a00 <RCC_GetPCLK2Value+0xa0>)
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	0a9b      	lsrs	r3, r3, #10
 80009c4:	b2db      	uxtb	r3, r3
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	723b      	strb	r3, [r7, #8]

	if(temp<7)
 80009cc:	7a3b      	ldrb	r3, [r7, #8]
 80009ce:	2b06      	cmp	r3, #6
 80009d0:	d802      	bhi.n	80009d8 <RCC_GetPCLK2Value+0x78>
	{
		apb2p = 1;
 80009d2:	2301      	movs	r3, #1
 80009d4:	72bb      	strb	r3, [r7, #10]
 80009d6:	e004      	b.n	80009e2 <RCC_GetPCLK2Value+0x82>
	}
	else
	{
		apb2p = APB2_PreScaler[temp - 4];
 80009d8:	7a3b      	ldrb	r3, [r7, #8]
 80009da:	3b04      	subs	r3, #4
 80009dc:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <RCC_GetPCLK2Value+0xb0>)
 80009de:	5cd3      	ldrb	r3, [r2, r3]
 80009e0:	72bb      	strb	r3, [r7, #10]
	}

	//4. Calculate the value of pclk1
	pclk2 = SystemClk / (apb2p * ahbp);
 80009e2:	7abb      	ldrb	r3, [r7, #10]
 80009e4:	7afa      	ldrb	r2, [r7, #11]
 80009e6:	fb02 f303 	mul.w	r3, r2, r3
 80009ea:	461a      	mov	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	fbb3 f3f2 	udiv	r3, r3, r2
 80009f2:	607b      	str	r3, [r7, #4]
	return pclk2;
 80009f4:	687b      	ldr	r3, [r7, #4]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3710      	adds	r7, #16
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
 80009fe:	bf00      	nop
 8000a00:	40023800 	.word	0x40023800
 8000a04:	00f42400 	.word	0x00f42400
 8000a08:	007a1200 	.word	0x007a1200
 8000a0c:	20000000 	.word	0x20000000
 8000a10:	20000014 	.word	0x20000014

08000a14 <RCC_GetPLLClockOutput>:

uint32_t RCC_GetPLLClockOutput()
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
	uint32_t temp;

	temp = 0;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	607b      	str	r3, [r7, #4]
	//NOTE: PLL is not used

	return temp;
 8000a1e:	687b      	ldr	r3, [r7, #4]
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	370c      	adds	r7, #12
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bc80      	pop	{r7}
 8000a28:	4770      	bx	lr
	...

08000a2c <USART_PeriClockControl>:
#include "stm32f446xx_usart_driver.h"

static void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate);

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	6078      	str	r0, [r7, #4]
 8000a34:	460b      	mov	r3, r1
 8000a36:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000a38:	78fb      	ldrb	r3, [r7, #3]
 8000a3a:	2b01      	cmp	r3, #1
 8000a3c:	d141      	bne.n	8000ac2 <USART_PeriClockControl+0x96>
	{
		if (pUSARTx == USART1)
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	4a43      	ldr	r2, [pc, #268]	; (8000b50 <USART_PeriClockControl+0x124>)
 8000a42:	4293      	cmp	r3, r2
 8000a44:	d106      	bne.n	8000a54 <USART_PeriClockControl+0x28>
		{
			USART1_PCLK_EN();
 8000a46:	4b43      	ldr	r3, [pc, #268]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4a:	4a42      	ldr	r2, [pc, #264]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a4c:	f043 0310 	orr.w	r3, r3, #16
 8000a50:	6453      	str	r3, [r2, #68]	; 0x44
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}
 8000a52:	e077      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a40      	ldr	r2, [pc, #256]	; (8000b58 <USART_PeriClockControl+0x12c>)
 8000a58:	4293      	cmp	r3, r2
 8000a5a:	d106      	bne.n	8000a6a <USART_PeriClockControl+0x3e>
			USART2_PCLK_EN();
 8000a5c:	4b3d      	ldr	r3, [pc, #244]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a60:	4a3c      	ldr	r2, [pc, #240]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a66:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a68:	e06c      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4a3b      	ldr	r2, [pc, #236]	; (8000b5c <USART_PeriClockControl+0x130>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d106      	bne.n	8000a80 <USART_PeriClockControl+0x54>
			USART3_PCLK_EN();
 8000a72:	4b38      	ldr	r3, [pc, #224]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a76:	4a37      	ldr	r2, [pc, #220]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a78:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000a7c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a7e:	e061      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	4a37      	ldr	r2, [pc, #220]	; (8000b60 <USART_PeriClockControl+0x134>)
 8000a84:	4293      	cmp	r3, r2
 8000a86:	d106      	bne.n	8000a96 <USART_PeriClockControl+0x6a>
			UART4_PCLK_EN();
 8000a88:	4b32      	ldr	r3, [pc, #200]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	4a31      	ldr	r2, [pc, #196]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000a8e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000a92:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000a94:	e056      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	4a32      	ldr	r2, [pc, #200]	; (8000b64 <USART_PeriClockControl+0x138>)
 8000a9a:	4293      	cmp	r3, r2
 8000a9c:	d106      	bne.n	8000aac <USART_PeriClockControl+0x80>
			UART5_PCLK_EN();
 8000a9e:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000aa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa2:	4a2c      	ldr	r2, [pc, #176]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000aa4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000aa8:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aaa:	e04b      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000aac:	687b      	ldr	r3, [r7, #4]
 8000aae:	4a2e      	ldr	r2, [pc, #184]	; (8000b68 <USART_PeriClockControl+0x13c>)
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d147      	bne.n	8000b44 <USART_PeriClockControl+0x118>
			USART6_PCLK_EN();
 8000ab4:	4b27      	ldr	r3, [pc, #156]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000ab6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab8:	4a26      	ldr	r2, [pc, #152]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000aba:	f043 0320 	orr.w	r3, r3, #32
 8000abe:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ac0:	e040      	b.n	8000b44 <USART_PeriClockControl+0x118>
		if (pUSARTx == USART1)
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	4a22      	ldr	r2, [pc, #136]	; (8000b50 <USART_PeriClockControl+0x124>)
 8000ac6:	4293      	cmp	r3, r2
 8000ac8:	d106      	bne.n	8000ad8 <USART_PeriClockControl+0xac>
			USART1_PCLK_DI();
 8000aca:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000acc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ace:	4a21      	ldr	r2, [pc, #132]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000ad0:	f023 0310 	bic.w	r3, r3, #16
 8000ad4:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000ad6:	e035      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART2)
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	4a1f      	ldr	r2, [pc, #124]	; (8000b58 <USART_PeriClockControl+0x12c>)
 8000adc:	4293      	cmp	r3, r2
 8000ade:	d106      	bne.n	8000aee <USART_PeriClockControl+0xc2>
			USART2_PCLK_DI();
 8000ae0:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000ae6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8000aea:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000aec:	e02a      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == USART3)
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	4a1a      	ldr	r2, [pc, #104]	; (8000b5c <USART_PeriClockControl+0x130>)
 8000af2:	4293      	cmp	r3, r2
 8000af4:	d106      	bne.n	8000b04 <USART_PeriClockControl+0xd8>
			USART3_PCLK_DI();
 8000af6:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a16      	ldr	r2, [pc, #88]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000afc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b02:	e01f      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if (pUSARTx == UART4)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	4a16      	ldr	r2, [pc, #88]	; (8000b60 <USART_PeriClockControl+0x134>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d106      	bne.n	8000b1a <USART_PeriClockControl+0xee>
			UART4_PCLK_DI();
 8000b0c:	4b11      	ldr	r3, [pc, #68]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b10:	4a10      	ldr	r2, [pc, #64]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b12:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000b16:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b18:	e014      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == UART5)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	4a11      	ldr	r2, [pc, #68]	; (8000b64 <USART_PeriClockControl+0x138>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d106      	bne.n	8000b30 <USART_PeriClockControl+0x104>
			UART5_PCLK_DI();
 8000b22:	4b0c      	ldr	r3, [pc, #48]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b26:	4a0b      	ldr	r2, [pc, #44]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b28:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8000b2c:	6413      	str	r3, [r2, #64]	; 0x40
}
 8000b2e:	e009      	b.n	8000b44 <USART_PeriClockControl+0x118>
		else if(pUSARTx == USART6)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <USART_PeriClockControl+0x13c>)
 8000b34:	4293      	cmp	r3, r2
 8000b36:	d105      	bne.n	8000b44 <USART_PeriClockControl+0x118>
			USART6_PCLK_DI();
 8000b38:	4b06      	ldr	r3, [pc, #24]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b3c:	4a05      	ldr	r2, [pc, #20]	; (8000b54 <USART_PeriClockControl+0x128>)
 8000b3e:	f023 0320 	bic.w	r3, r3, #32
 8000b42:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000b44:	bf00      	nop
 8000b46:	370c      	adds	r7, #12
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bc80      	pop	{r7}
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40011000 	.word	0x40011000
 8000b54:	40023800 	.word	0x40023800
 8000b58:	40004400 	.word	0x40004400
 8000b5c:	40004800 	.word	0x40004800
 8000b60:	40004c00 	.word	0x40004c00
 8000b64:	40005000 	.word	0x40005000
 8000b68:	40011400 	.word	0x40011400

08000b6c <USART_PeripheralControl>:

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
 8000b74:	460b      	mov	r3, r1
 8000b76:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000b78:	78fb      	ldrb	r3, [r7, #3]
 8000b7a:	2b01      	cmp	r3, #1
 8000b7c:	d106      	bne.n	8000b8c <USART_PeripheralControl+0x20>
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	68db      	ldr	r3, [r3, #12]
 8000b82:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60da      	str	r2, [r3, #12]
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}
 8000b8a:	e005      	b.n	8000b98 <USART_PeripheralControl+0x2c>
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	68db      	ldr	r3, [r3, #12]
 8000b90:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	60da      	str	r2, [r3, #12]
}
 8000b98:	bf00      	nop
 8000b9a:	370c      	adds	r7, #12
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bc80      	pop	{r7}
 8000ba0:	4770      	bx	lr

08000ba2 <USART_GetFlagStatus>:

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StausFlagName)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	b083      	sub	sp, #12
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
 8000baa:	460b      	mov	r3, r1
 8000bac:	70fb      	strb	r3, [r7, #3]
	if(pUSARTx->SR & StausFlagName)
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	681a      	ldr	r2, [r3, #0]
 8000bb2:	78fb      	ldrb	r3, [r7, #3]
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <USART_GetFlagStatus+0x1c>
	{
		return FLAG_SET;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e000      	b.n	8000bc0 <USART_GetFlagStatus+0x1e>
	}
	else
	{
		return FLAG_RESET;
 8000bbe:	2300      	movs	r3, #0
	}
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bc80      	pop	{r7}
 8000bc8:	4770      	bx	lr

08000bca <USART_Init>:
	}

}

void USART_Init(USART_Handle_t *pUSARTHandle)
{
 8000bca:	b580      	push	{r7, lr}
 8000bcc:	b084      	sub	sp, #16
 8000bce:	af00      	add	r7, sp, #0
 8000bd0:	6078      	str	r0, [r7, #4]
	//Temporary Variable
	uint32_t tempreg =0;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	60fb      	str	r3, [r7, #12]

	/***************************Configuration of CR1 Register*******************************************************/

	//1. Enable clock for USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	2101      	movs	r1, #1
 8000bdc:	4618      	mov	r0, r3
 8000bde:	f7ff ff25 	bl	8000a2c <USART_PeriClockControl>

	//2. Enable the Tx and Rx engines according to the required USART modes
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	791b      	ldrb	r3, [r3, #4]
 8000be6:	2b01      	cmp	r3, #1
 8000be8:	d104      	bne.n	8000bf4 <USART_Init+0x2a>
	{
		//Enable the receiver bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		tempreg |= (1 << USART_CR1_RE);
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f043 0304 	orr.w	r3, r3, #4
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	e014      	b.n	8000c1e <USART_Init+0x54>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	791b      	ldrb	r3, [r3, #4]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d104      	bne.n	8000c06 <USART_Init+0x3c>
	{
		//Enable the transmitter bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
		tempreg |= (1 << USART_CR1_TE);
 8000bfc:	68fb      	ldr	r3, [r7, #12]
 8000bfe:	f043 0308 	orr.w	r3, r3, #8
 8000c02:	60fb      	str	r3, [r7, #12]
 8000c04:	e00b      	b.n	8000c1e <USART_Init+0x54>
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	791b      	ldrb	r3, [r3, #4]
 8000c0a:	2b02      	cmp	r3, #2
 8000c0c:	d107      	bne.n	8000c1e <USART_Init+0x54>
	{
		//Enable the transmitter and receiver bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		tempreg |= (1 << USART_CR1_TE);
 8000c0e:	68fb      	ldr	r3, [r7, #12]
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR1_RE);
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	f043 0304 	orr.w	r3, r3, #4
 8000c1c:	60fb      	str	r3, [r7, #12]
	}

	//3. Cofigure the word length
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	7b5b      	ldrb	r3, [r3, #13]
 8000c22:	031b      	lsls	r3, r3, #12
 8000c24:	461a      	mov	r2, r3
 8000c26:	68fb      	ldr	r3, [r7, #12]
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

	//4. Configuration of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	7b9b      	ldrb	r3, [r3, #14]
 8000c30:	2b01      	cmp	r3, #1
 8000c32:	d108      	bne.n	8000c46 <USART_Init+0x7c>
	{
		//First enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000c34:	68fb      	ldr	r3, [r7, #12]
 8000c36:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c3a:	60fb      	str	r3, [r7, #12]

		//Select Event Parity
		tempreg &= ~(1 << USART_CR1_PS);
 8000c3c:	68fb      	ldr	r3, [r7, #12]
 8000c3e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000c42:	60fb      	str	r3, [r7, #12]
 8000c44:	e00b      	b.n	8000c5e <USART_Init+0x94>
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	7b9b      	ldrb	r3, [r3, #14]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d107      	bne.n	8000c5e <USART_Init+0x94>
	{
		//First enable the parity control
		tempreg |= (1 << USART_CR1_PCE);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c54:	60fb      	str	r3, [r7, #12]

		//Select Odd Parity
		tempreg |= (1 << USART_CR1_PS);
 8000c56:	68fb      	ldr	r3, [r7, #12]
 8000c58:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c5c:	60fb      	str	r3, [r7, #12]
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	60da      	str	r2, [r3, #12]


	/*************************************Configuration of CR2 register**************************************/
	tempreg = 0;
 8000c66:	2300      	movs	r3, #0
 8000c68:	60fb      	str	r3, [r7, #12]

	//1. Configure the number of stop bits
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	7b1b      	ldrb	r3, [r3, #12]
 8000c6e:	031b      	lsls	r3, r3, #12
 8000c70:	461a      	mov	r2, r3
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	60fb      	str	r3, [r7, #12]

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	68fa      	ldr	r2, [r7, #12]
 8000c7e:	611a      	str	r2, [r3, #16]

	/**************************************Configuration of CR3 register*************************************/
	tempreg = 0;
 8000c80:	2300      	movs	r3, #0
 8000c82:	60fb      	str	r3, [r7, #12]

	//1. Configuration of USART Hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
 8000c84:	687b      	ldr	r3, [r7, #4]
 8000c86:	7bdb      	ldrb	r3, [r3, #15]
 8000c88:	2b01      	cmp	r3, #1
 8000c8a:	d104      	bne.n	8000c96 <USART_Init+0xcc>
	{
		//Enable CTS
		tempreg |= (1 << USART_CR3_CTSE);
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c92:	60fb      	str	r3, [r7, #12]
 8000c94:	e014      	b.n	8000cc0 <USART_Init+0xf6>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	7bdb      	ldrb	r3, [r3, #15]
 8000c9a:	2b02      	cmp	r3, #2
 8000c9c:	d104      	bne.n	8000ca8 <USART_Init+0xde>
	{
		//Enable RTS
		tempreg |= (1 << USART_CR3_RTSE);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	e00b      	b.n	8000cc0 <USART_Init+0xf6>
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	7bdb      	ldrb	r3, [r3, #15]
 8000cac:	2b03      	cmp	r3, #3
 8000cae:	d107      	bne.n	8000cc0 <USART_Init+0xf6>
	{
		//Enable RTS and CTS
		tempreg |= (1 << USART_CR3_CTSE);
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cb6:	60fb      	str	r3, [r7, #12]
		tempreg |= (1 << USART_CR3_RTSE);
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cbe:	60fb      	str	r3, [r7, #12]
	}

	//Program CR3 Register
	pUSARTHandle->pUSARTx->CR3 = tempreg;
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	68fa      	ldr	r2, [r7, #12]
 8000cc6:	615a      	str	r2, [r3, #20]

	/**************************************Configuration of Baud Rate config register**************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681a      	ldr	r2, [r3, #0]
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	689b      	ldr	r3, [r3, #8]
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4610      	mov	r0, r2
 8000cd4:	f000 f852 	bl	8000d7c <USART_SetBaudRate>
}
 8000cd8:	bf00      	nop
 8000cda:	3710      	adds	r7, #16
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}

08000ce0 <USART_SendData>:
 *
 * @Note              -

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	60f8      	str	r0, [r7, #12]
 8000ce8:	60b9      	str	r1, [r7, #8]
 8000cea:	607a      	str	r2, [r7, #4]

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	e031      	b.n	8000d56 <USART_SendData+0x76>
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));
 8000cf2:	bf00      	nop
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2180      	movs	r1, #128	; 0x80
 8000cfa:	4618      	mov	r0, r3
 8000cfc:	f7ff ff51 	bl	8000ba2 <USART_GetFlagStatus>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d0f6      	beq.n	8000cf4 <USART_SendData+0x14>

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	7b5b      	ldrb	r3, [r3, #13]
 8000d0a:	2b01      	cmp	r3, #1
 8000d0c:	d118      	bne.n	8000d40 <USART_SendData+0x60>
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
 8000d0e:	68bb      	ldr	r3, [r7, #8]
 8000d10:	613b      	str	r3, [r7, #16]
			pUSARTHandle->pUSARTx->DR= (*pdata & (uint16_t)0x01FF);
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	881b      	ldrh	r3, [r3, #0]
 8000d16:	461a      	mov	r2, r3
 8000d18:	68fb      	ldr	r3, [r7, #12]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d20:	605a      	str	r2, [r3, #4]

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
 8000d22:	68fb      	ldr	r3, [r7, #12]
 8000d24:	7b9b      	ldrb	r3, [r3, #14]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d106      	bne.n	8000d38 <USART_SendData+0x58>
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
 8000d2a:	68bb      	ldr	r3, [r7, #8]
 8000d2c:	3301      	adds	r3, #1
 8000d2e:	60bb      	str	r3, [r7, #8]
				pTxBuffer++;
 8000d30:	68bb      	ldr	r3, [r7, #8]
 8000d32:	3301      	adds	r3, #1
 8000d34:	60bb      	str	r3, [r7, #8]
 8000d36:	e00b      	b.n	8000d50 <USART_SendData+0x70>
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
 8000d38:	68bb      	ldr	r3, [r7, #8]
 8000d3a:	3301      	adds	r3, #1
 8000d3c:	60bb      	str	r3, [r7, #8]
 8000d3e:	e007      	b.n	8000d50 <USART_SendData+0x70>
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);
 8000d40:	68bb      	ldr	r3, [r7, #8]
 8000d42:	781a      	ldrb	r2, [r3, #0]
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]

			//Implement the code to increment the buffer address
			pTxBuffer++;
 8000d4a:	68bb      	ldr	r3, [r7, #8]
 8000d4c:	3301      	adds	r3, #1
 8000d4e:	60bb      	str	r3, [r7, #8]
	for(uint32_t i = 0 ; i < Len; i++)
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	3301      	adds	r3, #1
 8000d54:	617b      	str	r3, [r7, #20]
 8000d56:	697a      	ldr	r2, [r7, #20]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	429a      	cmp	r2, r3
 8000d5c:	d3c9      	bcc.n	8000cf2 <USART_SendData+0x12>
		}

	}
	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
 8000d5e:	bf00      	nop
 8000d60:	68fb      	ldr	r3, [r7, #12]
 8000d62:	681b      	ldr	r3, [r3, #0]
 8000d64:	2140      	movs	r1, #64	; 0x40
 8000d66:	4618      	mov	r0, r3
 8000d68:	f7ff ff1b 	bl	8000ba2 <USART_GetFlagStatus>
 8000d6c:	4603      	mov	r3, r0
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d0f6      	beq.n	8000d60 <USART_SendData+0x80>

}
 8000d72:	bf00      	nop
 8000d74:	3718      	adds	r7, #24
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}
	...

08000d7c <USART_SetBaudRate>:
 *
 * @Note              -

 */
static void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b088      	sub	sp, #32
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
 8000d84:	6039      	str	r1, [r7, #0]
	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4a31      	ldr	r2, [pc, #196]	; (8000e54 <USART_SetBaudRate+0xd8>)
 8000d8e:	4293      	cmp	r3, r2
 8000d90:	d003      	beq.n	8000d9a <USART_SetBaudRate+0x1e>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	4a30      	ldr	r2, [pc, #192]	; (8000e58 <USART_SetBaudRate+0xdc>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d103      	bne.n	8000da2 <USART_SetBaudRate+0x26>
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
 8000d9a:	f7ff fde1 	bl	8000960 <RCC_GetPCLK2Value>
 8000d9e:	61f8      	str	r0, [r7, #28]
 8000da0:	e002      	b.n	8000da8 <USART_SetBaudRate+0x2c>
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
 8000da2:	f7ff fd83 	bl	80008ac <RCC_GetPCLK1Value>
 8000da6:	61f8      	str	r0, [r7, #28]
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVR8))
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	68db      	ldr	r3, [r3, #12]
 8000dac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d00b      	beq.n	8000dcc <USART_SetBaudRate+0x50>
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
 8000db4:	69fa      	ldr	r2, [r7, #28]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	009a      	lsls	r2, r3, #2
 8000dbe:	441a      	add	r2, r3
 8000dc0:	683b      	ldr	r3, [r7, #0]
 8000dc2:	005b      	lsls	r3, r3, #1
 8000dc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dc8:	61bb      	str	r3, [r7, #24]
 8000dca:	e00a      	b.n	8000de2 <USART_SetBaudRate+0x66>
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
 8000dcc:	69fa      	ldr	r2, [r7, #28]
 8000dce:	4613      	mov	r3, r2
 8000dd0:	009b      	lsls	r3, r3, #2
 8000dd2:	4413      	add	r3, r2
 8000dd4:	009a      	lsls	r2, r3, #2
 8000dd6:	441a      	add	r2, r3
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	009b      	lsls	r3, r3, #2
 8000ddc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de0:	61bb      	str	r3, [r7, #24]
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;
 8000de2:	69bb      	ldr	r3, [r7, #24]
 8000de4:	4a1d      	ldr	r2, [pc, #116]	; (8000e5c <USART_SetBaudRate+0xe0>)
 8000de6:	fba2 2303 	umull	r2, r3, r2, r3
 8000dea:	095b      	lsrs	r3, r3, #5
 8000dec:	60fb      	str	r3, [r7, #12]

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;
 8000dee:	68fb      	ldr	r3, [r7, #12]
 8000df0:	011b      	lsls	r3, r3, #4
 8000df2:	693a      	ldr	r2, [r7, #16]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	613b      	str	r3, [r7, #16]

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	2264      	movs	r2, #100	; 0x64
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	69ba      	ldr	r2, [r7, #24]
 8000e02:	1ad3      	subs	r3, r2, r3
 8000e04:	617b      	str	r3, [r7, #20]

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVR8))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d00a      	beq.n	8000e28 <USART_SetBaudRate+0xac>
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);
 8000e12:	697b      	ldr	r3, [r7, #20]
 8000e14:	00db      	lsls	r3, r3, #3
 8000e16:	3332      	adds	r3, #50	; 0x32
 8000e18:	4a10      	ldr	r2, [pc, #64]	; (8000e5c <USART_SetBaudRate+0xe0>)
 8000e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e1e:	095b      	lsrs	r3, r3, #5
 8000e20:	f003 0307 	and.w	r3, r3, #7
 8000e24:	617b      	str	r3, [r7, #20]
 8000e26:	e009      	b.n	8000e3c <USART_SetBaudRate+0xc0>

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	011b      	lsls	r3, r3, #4
 8000e2c:	3332      	adds	r3, #50	; 0x32
 8000e2e:	4a0b      	ldr	r2, [pc, #44]	; (8000e5c <USART_SetBaudRate+0xe0>)
 8000e30:	fba2 2303 	umull	r2, r3, r2, r3
 8000e34:	095b      	lsrs	r3, r3, #5
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	617b      	str	r3, [r7, #20]

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;
 8000e3c:	693a      	ldr	r2, [r7, #16]
 8000e3e:	697b      	ldr	r3, [r7, #20]
 8000e40:	4313      	orrs	r3, r2
 8000e42:	613b      	str	r3, [r7, #16]

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	609a      	str	r2, [r3, #8]
}
 8000e4a:	bf00      	nop
 8000e4c:	3720      	adds	r7, #32
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	bd80      	pop	{r7, pc}
 8000e52:	bf00      	nop
 8000e54:	40011000 	.word	0x40011000
 8000e58:	40011400 	.word	0x40011400
 8000e5c:	51eb851f 	.word	0x51eb851f

08000e60 <__libc_init_array>:
 8000e60:	b570      	push	{r4, r5, r6, lr}
 8000e62:	4e0d      	ldr	r6, [pc, #52]	; (8000e98 <__libc_init_array+0x38>)
 8000e64:	4c0d      	ldr	r4, [pc, #52]	; (8000e9c <__libc_init_array+0x3c>)
 8000e66:	1ba4      	subs	r4, r4, r6
 8000e68:	10a4      	asrs	r4, r4, #2
 8000e6a:	2500      	movs	r5, #0
 8000e6c:	42a5      	cmp	r5, r4
 8000e6e:	d109      	bne.n	8000e84 <__libc_init_array+0x24>
 8000e70:	4e0b      	ldr	r6, [pc, #44]	; (8000ea0 <__libc_init_array+0x40>)
 8000e72:	4c0c      	ldr	r4, [pc, #48]	; (8000ea4 <__libc_init_array+0x44>)
 8000e74:	f000 f820 	bl	8000eb8 <_init>
 8000e78:	1ba4      	subs	r4, r4, r6
 8000e7a:	10a4      	asrs	r4, r4, #2
 8000e7c:	2500      	movs	r5, #0
 8000e7e:	42a5      	cmp	r5, r4
 8000e80:	d105      	bne.n	8000e8e <__libc_init_array+0x2e>
 8000e82:	bd70      	pop	{r4, r5, r6, pc}
 8000e84:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e88:	4798      	blx	r3
 8000e8a:	3501      	adds	r5, #1
 8000e8c:	e7ee      	b.n	8000e6c <__libc_init_array+0xc>
 8000e8e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000e92:	4798      	blx	r3
 8000e94:	3501      	adds	r5, #1
 8000e96:	e7f2      	b.n	8000e7e <__libc_init_array+0x1e>
 8000e98:	08000ed0 	.word	0x08000ed0
 8000e9c:	08000ed0 	.word	0x08000ed0
 8000ea0:	08000ed0 	.word	0x08000ed0
 8000ea4:	08000ed4 	.word	0x08000ed4

08000ea8 <memset>:
 8000ea8:	4402      	add	r2, r0
 8000eaa:	4603      	mov	r3, r0
 8000eac:	4293      	cmp	r3, r2
 8000eae:	d100      	bne.n	8000eb2 <memset+0xa>
 8000eb0:	4770      	bx	lr
 8000eb2:	f803 1b01 	strb.w	r1, [r3], #1
 8000eb6:	e7f9      	b.n	8000eac <memset+0x4>

08000eb8 <_init>:
 8000eb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000eba:	bf00      	nop
 8000ebc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000ebe:	bc08      	pop	{r3}
 8000ec0:	469e      	mov	lr, r3
 8000ec2:	4770      	bx	lr

08000ec4 <_fini>:
 8000ec4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ec6:	bf00      	nop
 8000ec8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000eca:	bc08      	pop	{r3}
 8000ecc:	469e      	mov	lr, r3
 8000ece:	4770      	bx	lr
