/*
 * stm32f446xx_spi_driver.c
 *
 *  Created on: 05-Mar-2021
 *      Author: DELL
 */
#include "stm32f446xx_spi_driver.h"

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
	if(pSPIx->SR & FlagName)
	{
		return FLAG_SET;
	}
	else
	{
		return FLAG_RESET;
	}
}

void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_EN();
		}

		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_EN();
		}

		else if(pSPIx == SPI3)
		{
			SPI3_PCLK_EN();
		}
	}

	else
	{
		if(pSPIx == SPI1)
		{
			SPI1_PCLK_DI();
		}

		else if(pSPIx == SPI2)
		{
			SPI2_PCLK_DI();
		}

	    else if(pSPIx == SPI3)
		{
			SPI2_PCLK_DI();
		}
	}
}

void SPI_Init(SPI_Handle_t *pSPIHandle)
{
	// Configure the CR1 register

	uint32_t tempreg = 0;

	//1. Configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;

	//2. Configure the Bus configurations
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
	{
		//BIDIMODE Should be cleared
		tempreg &= ~(1<<SPI_CR_BIDIMODE);

	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
	{
		// BIDIMODE should be set
		tempreg |= (1<<SPI_CR_BIDIMODE);
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
	{
		//BIDIMODE should be cleared. Then only we can get the spi to run on two lines and not one line (Half duplex)
		//RXONLY bit must be set
		tempreg &= ~(1<<SPI_CR_BIDIMODE);
		tempreg |= (1<<SPI_CR1_RXONLY);
	}

	//3. Configure the SCLK speed
	tempreg |= pSPIHandle->SPIConfig.SPI_SclSpeed << SPI_CR1_BR;

	//4. Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;

	//5. Configure CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;

	//6. Configure CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;


}

void SPI_DeInit(SPI_RegDef_t *pSPIx)
{
	if(pSPIx == SPI1)
	{
		SPI1_REG_RESET();
	}

	else if(pSPIx == SPI2)
	{
		SPI2_REG_RESET();
	}

	else if(pSPIx == SPI3)
	{
		SPI3_REG_RESET();
	}
}

void SPI_SendData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
	//This is the blocking API, because the function call will wait until all the bytes are transmitted

	while(Len >0)
	{
		//1. Wait until TXE is set

		while(SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);

		//2. Check the DFF bit
		if(pSPIx->CR1 & (1<< SPI_CR1_DFF))
		{
			//16 bit frame
			//1. Load the data into DR
			pSPIx->DR = *((uint16_t *)pTxBuffer); //convert it into a 16 bit type pointer and then deference the value

			//2. Decrement Length twice
			Len--;
			Len--;
			//3. Increment the data pointed by TX buffer
			(uint16_t *)pTxBuffer++;
		}
		else
		{
			//8 bit frame
			//1. Load the data into DR
			pSPIx->DR = *(pTxBuffer);

			//2. Decrement Length twice
			Len--;

			//3. Increment the data pointed by TX buffer
			pTxBuffer++;

		}

	}
}
