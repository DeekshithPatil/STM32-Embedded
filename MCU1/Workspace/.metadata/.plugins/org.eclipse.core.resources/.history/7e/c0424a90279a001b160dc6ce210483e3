/*
 * stm32f446xx_usart_driver.c
 *
 *  Created on: 08-Apr-2021
 *      Author: DELL
 */

#include "stm32f446xx_usart_driver.h"

static void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate);

void USART_PeriClockControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
	if (EnorDi == ENABLE)
	{
		if (pUSARTx == USART1)
		{
			USART1_PCLK_EN();
		}
		else if (pUSARTx == USART2)
		{
			USART2_PCLK_EN();
		}
		else if (pUSARTx == USART3)
		{
			USART3_PCLK_EN();
		}
		else if (pUSARTx == UART4)
		{
			UART4_PCLK_EN();
		}
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_EN();
		}
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_EN();
		}
	}

	else
	{
		if (pUSARTx == USART1)
		{
			USART1_PCLK_DI();
		}
		else if (pUSARTx == USART2)
		{
			USART2_PCLK_DI();
		}
		else if (pUSARTx == USART3)
		{
			USART3_PCLK_DI();
		}
		else if (pUSARTx == UART4)
		{
			UART4_PCLK_DI();
		}
		else if(pUSARTx == UART5)
		{
			UART5_PCLK_DI();
		}
		else if(pUSARTx == USART6)
		{
			USART6_PCLK_DI();
		}
	}
}

void USART_PeripheralControl(USART_RegDef_t *pUSARTx, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		pUSARTx->CR1 |= (1 << USART_CR1_UE);
	}
	else
	{
		pUSARTx->CR1 &= ~(1 << USART_CR1_UE);
	}
}

uint8_t USART_GetFlagStatus(USART_RegDef_t *pUSARTx, uint8_t StausFlagName)
{
	if(pUSARTx->SR & StausFlagName)
	{
		return FLAG_SET;
	}
	else
	{
		return FLAG_RESET;
	}
}


/*
 * Used to get the APB1 Pclk value
 */
//static uint32_t RCC_GetPCLK1Value(void)
//{
//	uint32_t pclk1, SystemClk;
//	uint8_t clksrc, temp;
//	uint8_t ahbp,apb1p; //prescalers for ahb and apb1
//
//	// APB1 Pclk (freq) = Freq of (HSI/HSE/PLL/PLL_R, whichever is selected) / (AHBPrescaler * APB1Prescaler)
//
//	//1. Obtain system clk value
//	//Refer to RCC_CFGR in reference manual to obtain more info
//	//SWS[1:0] (System clock switch status): Indicates which clock source is as the system clock
//
//	clksrc = (RCC->CFGR >> 2) & 0x3; //obtain values of bit number 2 and 3
//	if(clksrc == 0)
//	{
//		SystemClk = 16000000; //Internal clock source is of 16MHz
//	}
//	else if(clksrc == 1)
//	{
//		SystemClk = 8000000; //External clock frequency in case of Nucleo boards comes from STLink circuitry, which is 8MHz
//	}
//	else if(clksrc == 2)
//	{
//		SystemClk = RCC_GetPLLClockOutput();
//	}
//
//	//2. Obtain AHB pre-scalar value
//	//Refer to HPRE bit fields in RCC_CFGR register
//	temp = (RCC->CFGR >> 4) & 0xF; //Obtain HPRE value by masking
//	if(temp < 8)
//	{
//		ahbp = 1; //NO division
//	}
//	else
//	{
//		ahbp = AHB_PreScaler[temp-8]; //use temp (which is greater than 8) as index to obtain ahb pre-scaler value from array
//	}
//
//	//3. Obtain the APB1 pre-scalar
//	//Refer to the PPRE bit fields in RCC_CFGR register
//	temp = (RCC->CFGR >> 10) & 0x7;
//
//	if(temp<7)
//	{
//		apb1p = 1;
//	}
//	else
//	{
//		apb1p = APB1_PreScaler[temp - 4];
//	}
//
//	//4. Calculate the value of pclk1
//	pclk1 = SystemClk / (apb1p * ahbp);
//	return pclk1;
//}
//
///*
// * Used to get the APB2 Pclk value
// */
//static uint32_t RCC_GetPCLK2Value(void)
//{
//	uint32_t pclk2, SystemClk;
//	uint8_t clksrc, temp;
//	uint8_t ahbp,apb2p; //prescalers for ahb and apb2
//
//	// APB2 Pclk (freq) = Freq of (HSI/HSE/PLL/PLL_R, whichever is selected) / (AHBPrescaler * APB2Prescaler)
//
//	//1. Obtain system clk value
//	//Refer to RCC_CFGR in reference manual to obtain more info
//	//SWS[1:0] (System clock switch status): Indicates which clock source is as the system clock
//
//	clksrc = (RCC->CFGR >> 2) & 0x3; //obtain values of bit number 2 and 3
//	if(clksrc == 0)
//	{
//		SystemClk = 16000000; //Internal clock source is of 16MHz
//	}
//	else if(clksrc == 1)
//	{
//		SystemClk = 8000000; //External clock frequency in case of Nucleo boards comes from STLink circuitry, which is 8MHz
//	}
//	else if(clksrc == 2)
//	{
//		SystemClk = RCC_GetPLLClockOutput();
//	}
//
//	//2. Obtain AHB pre-scalar value
//	//Refer to HPRE bit fields in RCC_CFGR register
//	temp = (RCC->CFGR >> 4) & 0xF; //Obtain HPRE value by masking
//	if(temp < 8)
//	{
//		ahbp = 1; //NO division
//	}
//	else
//	{
//		ahbp = AHB_PreScaler[temp-8]; //use temp (which is greater than 8) as index to obtain ahb pre-scaler value from array
//	}
//
//	//3. Obtain the APB1 pre-scalar
//	//Refer to the PPRE bit fields in RCC_CFGR register
//	temp = (RCC->CFGR >> 10) & 0x7;
//
//	if(temp<7)
//	{
//		apb2p = 1;
//	}
//	else
//	{
//		apb2p = APB2_PreScaler[temp - 4];
//	}
//
//	//4. Calculate the value of pclk1
//	pclk2 = SystemClk / (apb2p * ahbp);
//	return pclk2;
//}

void USART_DeInit(USART_RegDef_t *pUSARTx)
{
	if(pUSARTx == USART1)
	{
		USART1_REG_RESET();
	}
	else if(pUSARTx == USART2)
	{
		USART2_REG_RESET();
	}
	else if(pUSARTx == USART3)
	{
		USART3_REG_RESET();
	}
	else if(pUSARTx == USART6)
	{
		USART6_REG_RESET();
	}
	else if(pUSARTx == UART4)
	{
		UART4_REG_RESET();
	}
	else if(pUSARTx == UART5)
	{
		UART5_REG_RESET();
	}

}

void USART_Init(USART_Handle_t *pUSARTHandle)
{
	//Temporary Variable
	uint32_t tempreg =0;

	/***************************Configuration of CR1 Register*******************************************************/

	//1. Enable clock for USART peripheral
	USART_PeriClockControl(pUSARTHandle->pUSARTx,ENABLE);

	//2. Enable the Tx and Rx engines according to the required USART modes
	if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_RX)
	{
		//Enable the receiver bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		tempreg |= (1 << USART_CR1_RE);
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_ONLY_TX)
	{
		//Enable the transmitter bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
		tempreg |= (1 << USART_CR1_TE);
	}
	else if(pUSARTHandle->USART_Config.USART_Mode == USART_MODE_TXRX)
	{
		//Enable the transmitter and receiver bit field
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_TE);
//		pUSARTHandle->pUSARTx->CR1 |= (1 << USART_CR1_RE);
		tempreg |= (1 << USART_CR1_TE);
		tempreg |= (1 << USART_CR1_RE);
	}

	//3. Cofigure the word length
	tempreg |= pUSARTHandle->USART_Config.USART_WordLength << USART_CR1_M;

	//4. Configuration of parity control bit fields
	if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_EVEN)
	{
		//First enable the parity control
		tempreg |= (1 << USART_CR1_PCE);

		//Select Event Parity
		tempreg &= ~(1 << USART_CR1_PS);
	}
	else if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_EN_ODD)
	{
		//First enable the parity control
		tempreg |= (1 << USART_CR1_PCE);

		//Select Odd Parity
		tempreg |= (1 << USART_CR1_PS);
	}

	//Program the CR1 register
	pUSARTHandle->pUSARTx->CR1 = tempreg;


	/*************************************Configuration of CR2 register**************************************/
	tempreg = 0;

	//1. Configure the number of stop bits
	tempreg |= pUSARTHandle->USART_Config.USART_NoOfStopBits << USART_CR2_STOP;

	//Program the CR2 register
	pUSARTHandle->pUSARTx->CR2 = tempreg;

	/**************************************Configuration of CR3 register*************************************/
	tempreg = 0;

	//1. Configuration of USART Hardware flow control
	if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS)
	{
		//Enable CTS
		tempreg |= (1 << USART_CR3_CTSE);
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_RTS)
	{
		//Enable RTS
		tempreg |= (1 << USART_CR3_RTSE);
	}
	else if(pUSARTHandle->USART_Config.USART_HWFlowControl == USART_HW_FLOW_CTRL_CTS_RTS)
	{
		//Enable RTS and CTS
		tempreg |= (1 << USART_CR3_CTSE);
		tempreg |= (1 << USART_CR3_RTSE);
	}

	//Program CR3 Register
	pUSARTHandle->pUSARTx->CR3 = tempreg;

	/**************************************Configuration of Baud Rate config register**************************/
	USART_SetBaudRate(pUSARTHandle->pUSARTx,pUSARTHandle->USART_Config.USART_Baud);
}

/*********************************************************************
 * @fn      		  - USART_SendData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
void USART_SendData(USART_Handle_t *pUSARTHandle, uint8_t *pTxBuffer, uint32_t Len)
{

	uint16_t *pdata;
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
	{
		//Implement the code to wait until TXE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TXE));

         //Check the USART_WordLength item for 9BIT or 8BIT in a frame
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
		{
			//if 9BIT, load the DR with 2bytes masking the bits other than first 9 bits
			pdata = (uint16_t*) pTxBuffer;
			pUSARTHandle->pUSARTx->DR= (*pdata & (uint16_t)0x01FF);

			//check for USART_ParityControl
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
			{
				//No parity is used in this transfer. so, 9bits of user data will be sent
				//Implement the code to increment pTxBuffer twice
				pTxBuffer++;
				pTxBuffer++;
			}
			else
			{
				//Parity bit is used in this transfer . so , 8bits of user data will be sent
				//The 9th bit will be replaced by parity bit by the hardware
				pTxBuffer++;
			}
		}
		else
		{
			//This is 8bit data transfer
			pUSARTHandle->pUSARTx->DR = (*pTxBuffer  & (uint8_t)0xFF);

			//Implement the code to increment the buffer address
			pTxBuffer++;
		}
	}

	//Implement the code to wait till TC flag is set in the SR
	while( ! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_TC));
}

/*********************************************************************
 * @fn      		  - USART_ReceiveData
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */

void USART_ReceiveData(USART_Handle_t *pUSARTHandle, uint8_t *pRxBuffer, uint32_t Len)
{
   //Loop over until "Len" number of bytes are transferred
	for(uint32_t i = 0 ; i < Len; i++)
	{
		//Implement the code to wait until RXNE flag is set in the SR
		while(! USART_GetFlagStatus(pUSARTHandle->pUSARTx,USART_FLAG_RXNE));

		//Check the USART_WordLength to decide whether we are going to receive 9bit of data in a frame or 8 bit
		if(pUSARTHandle->USART_Config.USART_WordLength == USART_WORDLEN_9BITS)
		{
			//We are going to receive 9bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
			{
				//No parity is used. so, all 9bits will be of user data

				//read only first 9 bits. so, mask the DR with 0x01FF
				*((uint16_t*) pRxBuffer) = (pUSARTHandle->pUSARTx->DR  & (uint16_t)0x01FF);

				//Now increment the pRxBuffer two times
				pRxBuffer++;
				pRxBuffer++;
			}
			else
			{
				//Parity is used, so, 8bits will be of user data and 1 bit is parity
				 *pRxBuffer = (pUSARTHandle->pUSARTx->DR  & (uint8_t)0xFF);

				 //Increment the pRxBuffer
				 pRxBuffer++;
			}
		}
		else
		{
			//We are going to receive 8bit data in a frame

			//check are we using USART_ParityControl control or not
			if(pUSARTHandle->USART_Config.USART_ParityControl == USART_PARITY_DISABLE)
			{
				//No parity is used , so all 8bits will be of user data

				//read 8 bits from DR
				 *pRxBuffer = pUSARTHandle->pUSARTx->DR;
			}

			else
			{
				//Parity is used, so , 7 bits will be of user data and 1 bit is parity

				//read only 7 bits , hence mask the DR with 0X7F
				 *pRxBuffer = ((uint8_t) pUSARTHandle->pUSARTx->DR & 0X7F);

			}

			//increment the pRxBuffer
			pRxBuffer++;
		}
	}

}

/*********************************************************************
 * @fn      		  - USART_SetBaudRate
 *
 * @brief             -
 *
 * @param[in]         -
 * @param[in]         -
 * @param[in]         -
 *
 * @return            -
 *
 * @Note              -

 */
static void USART_SetBaudRate(USART_RegDef_t *pUSARTx, uint32_t BaudRate)
{

	//Variable to hold the APB clock
	uint32_t PCLKx;

	uint32_t usartdiv;

	//variables to hold Mantissa and Fraction values
	uint32_t M_part,F_part;

  uint32_t tempreg=0;

  //Get the value of APB bus clock in to the variable PCLKx
  if(pUSARTx == USART1 || pUSARTx == USART6)
  {
	   //USART1 and USART6 are hanging on APB2 bus
	   PCLKx = RCC_GetPCLK2Value();
  }else
  {
	   PCLKx = RCC_GetPCLK1Value();
  }

  //Check for OVER8 configuration bit
  if(pUSARTx->CR1 & (1 << USART_CR1_OVR8))
  {
	   //OVER8 = 1 , over sampling by 8
	   usartdiv = ((25 * PCLKx) / (2 *BaudRate));
  }else
  {
	   //over sampling by 16
	   usartdiv = ((25 * PCLKx) / (4 *BaudRate));
  }

  //Calculate the Mantissa part
  M_part = usartdiv/100;

  //Place the Mantissa part in appropriate bit position . refer USART_BRR
  tempreg |= M_part << 4;

  //Extract the fraction part
  F_part = (usartdiv - (M_part * 100));

  //Calculate the final fractional
  if(pUSARTx->CR1 & ( 1 << USART_CR1_OVR8))
   {
	  //OVER8 = 1 , over sampling by 8
	  F_part = ((( F_part * 8)+ 50) / 100)& ((uint8_t)0x07);

   }else
   {
	   //over sampling by 16
	   F_part = ((( F_part * 16)+ 50) / 100) & ((uint8_t)0x0F);

   }

  //Place the fractional part in appropriate bit position . refer USART_BRR
  tempreg |= F_part;

  //copy the value of tempreg in to BRR register
  pUSARTx->BRR = tempreg;
}



void USART_IRQInterruptConfig(uint8_t IRQNumber, uint8_t EnorDi)
{
	if(EnorDi == ENABLE)
	{
		if(IRQNumber <= 31)
		{
			//program ISER0 register
			*NVIC_ISER0 |= ( 1 << IRQNumber );

		}else if(IRQNumber > 31 && IRQNumber < 64 ) //32 to 63
		{
			//program ISER1 register
			*NVIC_ISER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ISER2 register //64 to 95
			*NVIC_ISER3 |= ( 1 << (IRQNumber % 64) );
		}
	}else
	{
		if(IRQNumber <= 31)
		{
			//program ICER0 register
			*NVIC_ICER0 |= ( 1 << IRQNumber );
		}else if(IRQNumber > 31 && IRQNumber < 64 )
		{
			//program ICER1 register
			*NVIC_ICER1 |= ( 1 << (IRQNumber % 32) );
		}
		else if(IRQNumber >= 64 && IRQNumber < 96 )
		{
			//program ICER2 register
			*NVIC_ICER3 |= ( 1 << (IRQNumber % 64) );
		}
	}
}


void USART_IRQPriorityConfig(uint8_t IRQNumber, uint32_t IRQPriority)
{
	uint8_t temp1 = IRQNumber / 4;
	uint8_t temp2 = IRQNumber % 4;

	NVIC_IPR->IPR[temp1] |= (IRQPriority << ((8*temp2)+4));
	//NVIC_PR has 8 bits for setting priority of the associated IRQ. Out of this only the higher 4 bits actually set the value.
	//The lower 4 bits do not have any significance.
	//E.g: Lets say IRQ number is 0, then into IPR0, the priority value needs to be written into 7:4 and 3:0.
}

void USART_ClearFlag(USART_RegDef_t *pUSARTx, uint8_t StausFlagName)
{
	pUSARTx->SR &= ~(StausFlagName);
}

__weak void USART_ApplicationEventCallback(USART_Handle_t *pUSARTHandle,uint8_t AppEv)
{

}
