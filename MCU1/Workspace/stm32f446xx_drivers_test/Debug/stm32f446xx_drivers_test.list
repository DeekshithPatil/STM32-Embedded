
stm32f446xx_drivers_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000006bc  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000880  08000888  00010888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000880  08000880  00010888  2**0
                  CONTENTS
  4 .ARM          00000000  08000880  08000880  00010888  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000880  08000888  00010888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000880  08000880  00010880  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000884  08000884  00010884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010888  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000000  08000888  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08000888  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010888  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000b9e  00000000  00000000  000108b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000026f  00000000  00000000  00011456  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000000c8  00000000  00000000  000116c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000000a0  00000000  00000000  00011790  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000012bc  00000000  00000000  00011830  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00000e44  00000000  00000000  00012aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00004d79  00000000  00000000  00013930  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000186a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000264  00000000  00000000  00018724  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000868 	.word	0x08000868

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000868 	.word	0x08000868

08000204 <main>:


GPIO_Handle_t Button, Led;

int main()
{
 8000204:	b580      	push	{r7, lr}
 8000206:	af00      	add	r7, sp, #0


	Led.pGPIOx = GPIOA;
 8000208:	4b1d      	ldr	r3, [pc, #116]	; (8000280 <main+0x7c>)
 800020a:	4a1e      	ldr	r2, [pc, #120]	; (8000284 <main+0x80>)
 800020c:	601a      	str	r2, [r3, #0]
	Led.GPIO_PinConfig.PinNumber = GPIO_PIN_NO_5;
 800020e:	4b1c      	ldr	r3, [pc, #112]	; (8000280 <main+0x7c>)
 8000210:	2205      	movs	r2, #5
 8000212:	711a      	strb	r2, [r3, #4]
	Led.GPIO_PinConfig.Mode = GPIO_MODE_OUTPUT;
 8000214:	4b1a      	ldr	r3, [pc, #104]	; (8000280 <main+0x7c>)
 8000216:	2201      	movs	r2, #1
 8000218:	715a      	strb	r2, [r3, #5]
	Led.GPIO_PinConfig.Otype = GPIO_OTYPE_PP;
 800021a:	4b19      	ldr	r3, [pc, #100]	; (8000280 <main+0x7c>)
 800021c:	2200      	movs	r2, #0
 800021e:	719a      	strb	r2, [r3, #6]
	Led.GPIO_PinConfig.Ospeed = GPIO_OSPEED_FAST;
 8000220:	4b17      	ldr	r3, [pc, #92]	; (8000280 <main+0x7c>)
 8000222:	2202      	movs	r2, #2
 8000224:	71da      	strb	r2, [r3, #7]
	Led.GPIO_PinConfig.Pupd = GPIO_NO_PUPD;
 8000226:	4b16      	ldr	r3, [pc, #88]	; (8000280 <main+0x7c>)
 8000228:	2200      	movs	r2, #0
 800022a:	721a      	strb	r2, [r3, #8]

	Button.pGPIOx = GPIOC;
 800022c:	4b16      	ldr	r3, [pc, #88]	; (8000288 <main+0x84>)
 800022e:	4a17      	ldr	r2, [pc, #92]	; (800028c <main+0x88>)
 8000230:	601a      	str	r2, [r3, #0]
	Button.GPIO_PinConfig.PinNumber = GPIO_PIN_NO_13;
 8000232:	4b15      	ldr	r3, [pc, #84]	; (8000288 <main+0x84>)
 8000234:	220d      	movs	r2, #13
 8000236:	711a      	strb	r2, [r3, #4]
	Button.GPIO_PinConfig.Mode = GPIO_MODE_IT_FET;
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x84>)
 800023a:	2205      	movs	r2, #5
 800023c:	715a      	strb	r2, [r3, #5]
	Button.GPIO_PinConfig.Pupd = GPIO_NO_PUPD;
 800023e:	4b12      	ldr	r3, [pc, #72]	; (8000288 <main+0x84>)
 8000240:	2200      	movs	r2, #0
 8000242:	721a      	strb	r2, [r3, #8]
	Button.GPIO_PinConfig.Ospeed = GPIO_OSPEED_FAST;
 8000244:	4b10      	ldr	r3, [pc, #64]	; (8000288 <main+0x84>)
 8000246:	2202      	movs	r2, #2
 8000248:	71da      	strb	r2, [r3, #7]

	GPIOA_PCLK_EN();
 800024a:	4b11      	ldr	r3, [pc, #68]	; (8000290 <main+0x8c>)
 800024c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800024e:	4a10      	ldr	r2, [pc, #64]	; (8000290 <main+0x8c>)
 8000250:	f043 0301 	orr.w	r3, r3, #1
 8000254:	6313      	str	r3, [r2, #48]	; 0x30
	GPIOC_PCLK_EN();
 8000256:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <main+0x8c>)
 8000258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025a:	4a0d      	ldr	r2, [pc, #52]	; (8000290 <main+0x8c>)
 800025c:	f043 0304 	orr.w	r3, r3, #4
 8000260:	6313      	str	r3, [r2, #48]	; 0x30

	GPIO_Init(&Button);
 8000262:	4809      	ldr	r0, [pc, #36]	; (8000288 <main+0x84>)
 8000264:	f000 f856 	bl	8000314 <GPIO_Init>
	GPIO_Init(&Led);
 8000268:	4805      	ldr	r0, [pc, #20]	; (8000280 <main+0x7c>)
 800026a:	f000 f853 	bl	8000314 <GPIO_Init>

	GPIO_IRQConfig(EXTI15_10_IRQ_NO, ENABLE);
 800026e:	2101      	movs	r1, #1
 8000270:	2028      	movs	r0, #40	; 0x28
 8000272:	f000 f9bd 	bl	80005f0 <GPIO_IRQConfig>
	GPIO_IRQPriority(EXTI15_10_IRQ_NO, NVIC_IRQ_PRIO_15);
 8000276:	210f      	movs	r1, #15
 8000278:	2028      	movs	r0, #40	; 0x28
 800027a:	f000 fa39 	bl	80006f0 <GPIO_IRQPriority>
	while(1)
 800027e:	e7fe      	b.n	800027e <main+0x7a>
 8000280:	20000028 	.word	0x20000028
 8000284:	40020000 	.word	0x40020000
 8000288:	2000001c 	.word	0x2000001c
 800028c:	40020800 	.word	0x40020800
 8000290:	40023800 	.word	0x40023800

08000294 <EXTI15_10_IRQHandler>:

	return 0;
}

void EXTI15_10_IRQHandler(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	af00      	add	r7, sp, #0
	GPIO_IRQHandle(Button.GPIO_PinConfig.PinNumber);
 8000298:	4b07      	ldr	r3, [pc, #28]	; (80002b8 <EXTI15_10_IRQHandler+0x24>)
 800029a:	791b      	ldrb	r3, [r3, #4]
 800029c:	4618      	mov	r0, r3
 800029e:	f000 fa4b 	bl	8000738 <GPIO_IRQHandle>

	GPIO_ToggleOutputPin(Led.pGPIOx, Led.GPIO_PinConfig.PinNumber);
 80002a2:	4b06      	ldr	r3, [pc, #24]	; (80002bc <EXTI15_10_IRQHandler+0x28>)
 80002a4:	681a      	ldr	r2, [r3, #0]
 80002a6:	4b05      	ldr	r3, [pc, #20]	; (80002bc <EXTI15_10_IRQHandler+0x28>)
 80002a8:	791b      	ldrb	r3, [r3, #4]
 80002aa:	4619      	mov	r1, r3
 80002ac:	4610      	mov	r0, r2
 80002ae:	f000 f989 	bl	80005c4 <GPIO_ToggleOutputPin>
}
 80002b2:	bf00      	nop
 80002b4:	bd80      	pop	{r7, pc}
 80002b6:	bf00      	nop
 80002b8:	2000001c 	.word	0x2000001c
 80002bc:	20000028 	.word	0x20000028

080002c0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002c0:	480d      	ldr	r0, [pc, #52]	; (80002f8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002c2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480d      	ldr	r0, [pc, #52]	; (80002fc <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490e      	ldr	r1, [pc, #56]	; (8000300 <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0e      	ldr	r2, [pc, #56]	; (8000304 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0b      	ldr	r2, [pc, #44]	; (8000308 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0b      	ldr	r4, [pc, #44]	; (800030c <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80002ea:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 80002ee:	f000 fa97 	bl	8000820 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002f2:	f7ff ff87 	bl	8000204 <main>

080002f6 <LoopForever>:

LoopForever:
    b LoopForever
 80002f6:	e7fe      	b.n	80002f6 <LoopForever>
  ldr   r0, =_estack
 80002f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80002fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000300:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000304:	08000888 	.word	0x08000888
  ldr r2, =_sbss
 8000308:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800030c:	20000034 	.word	0x20000034

08000310 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000310:	e7fe      	b.n	8000310 <ADC_IRQHandler>
	...

08000314 <GPIO_Init>:
	}
}


void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000314:	b580      	push	{r7, lr}
 8000316:	b086      	sub	sp, #24
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	617b      	str	r3, [r7, #20]

	if(pGPIOHandle->GPIO_PinConfig.Mode <= GPIO_MODE_ANALOG)
 8000320:	687b      	ldr	r3, [r7, #4]
 8000322:	795b      	ldrb	r3, [r3, #5]
 8000324:	2b03      	cmp	r3, #3
 8000326:	d821      	bhi.n	800036c <GPIO_Init+0x58>
	{
		// Non Interrupt Mode
		temp = pGPIOHandle->GPIO_PinConfig.Mode;
 8000328:	687b      	ldr	r3, [r7, #4]
 800032a:	795b      	ldrb	r3, [r3, #5]
 800032c:	617b      	str	r3, [r7, #20]
		temp = (temp << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	791b      	ldrb	r3, [r3, #4]
 8000332:	005b      	lsls	r3, r3, #1
 8000334:	697a      	ldr	r2, [r7, #20]
 8000336:	fa02 f303 	lsl.w	r3, r2, r3
 800033a:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	681a      	ldr	r2, [r3, #0]
 8000342:	687b      	ldr	r3, [r7, #4]
 8000344:	791b      	ldrb	r3, [r3, #4]
 8000346:	005b      	lsls	r3, r3, #1
 8000348:	2103      	movs	r1, #3
 800034a:	fa01 f303 	lsl.w	r3, r1, r3
 800034e:	43db      	mvns	r3, r3
 8000350:	4619      	mov	r1, r3
 8000352:	687b      	ldr	r3, [r7, #4]
 8000354:	681b      	ldr	r3, [r3, #0]
 8000356:	400a      	ands	r2, r1
 8000358:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	681b      	ldr	r3, [r3, #0]
 800035e:	6819      	ldr	r1, [r3, #0]
 8000360:	687b      	ldr	r3, [r7, #4]
 8000362:	681b      	ldr	r3, [r3, #0]
 8000364:	697a      	ldr	r2, [r7, #20]
 8000366:	430a      	orrs	r2, r1
 8000368:	601a      	str	r2, [r3, #0]
 800036a:	e083      	b.n	8000474 <GPIO_Init+0x160>
	else
	{
		//Interrupt mode

		//1. Configure edge selection
		if(pGPIOHandle->GPIO_PinConfig.Mode == GPIO_MODE_IT_RET)
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	795b      	ldrb	r3, [r3, #5]
 8000370:	2b04      	cmp	r3, #4
 8000372:	d117      	bne.n	80003a4 <GPIO_Init+0x90>
		{
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 8000374:	4b90      	ldr	r3, [pc, #576]	; (80005b8 <GPIO_Init+0x2a4>)
 8000376:	689b      	ldr	r3, [r3, #8]
 8000378:	687a      	ldr	r2, [r7, #4]
 800037a:	7912      	ldrb	r2, [r2, #4]
 800037c:	4611      	mov	r1, r2
 800037e:	2201      	movs	r2, #1
 8000380:	408a      	lsls	r2, r1
 8000382:	4611      	mov	r1, r2
 8000384:	4a8c      	ldr	r2, [pc, #560]	; (80005b8 <GPIO_Init+0x2a4>)
 8000386:	430b      	orrs	r3, r1
 8000388:	6093      	str	r3, [r2, #8]
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 800038a:	4b8b      	ldr	r3, [pc, #556]	; (80005b8 <GPIO_Init+0x2a4>)
 800038c:	68db      	ldr	r3, [r3, #12]
 800038e:	687a      	ldr	r2, [r7, #4]
 8000390:	7912      	ldrb	r2, [r2, #4]
 8000392:	4611      	mov	r1, r2
 8000394:	2201      	movs	r2, #1
 8000396:	408a      	lsls	r2, r1
 8000398:	43d2      	mvns	r2, r2
 800039a:	4611      	mov	r1, r2
 800039c:	4a86      	ldr	r2, [pc, #536]	; (80005b8 <GPIO_Init+0x2a4>)
 800039e:	400b      	ands	r3, r1
 80003a0:	60d3      	str	r3, [r2, #12]
 80003a2:	e035      	b.n	8000410 <GPIO_Init+0xfc>
		}

		else if(pGPIOHandle->GPIO_PinConfig.Mode == GPIO_MODE_IT_FET)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	795b      	ldrb	r3, [r3, #5]
 80003a8:	2b05      	cmp	r3, #5
 80003aa:	d117      	bne.n	80003dc <GPIO_Init+0xc8>
		{
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 80003ac:	4b82      	ldr	r3, [pc, #520]	; (80005b8 <GPIO_Init+0x2a4>)
 80003ae:	68db      	ldr	r3, [r3, #12]
 80003b0:	687a      	ldr	r2, [r7, #4]
 80003b2:	7912      	ldrb	r2, [r2, #4]
 80003b4:	4611      	mov	r1, r2
 80003b6:	2201      	movs	r2, #1
 80003b8:	408a      	lsls	r2, r1
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a7e      	ldr	r2, [pc, #504]	; (80005b8 <GPIO_Init+0x2a4>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.PinNumber);
 80003c2:	4b7d      	ldr	r3, [pc, #500]	; (80005b8 <GPIO_Init+0x2a4>)
 80003c4:	689b      	ldr	r3, [r3, #8]
 80003c6:	687a      	ldr	r2, [r7, #4]
 80003c8:	7912      	ldrb	r2, [r2, #4]
 80003ca:	4611      	mov	r1, r2
 80003cc:	2201      	movs	r2, #1
 80003ce:	408a      	lsls	r2, r1
 80003d0:	43d2      	mvns	r2, r2
 80003d2:	4611      	mov	r1, r2
 80003d4:	4a78      	ldr	r2, [pc, #480]	; (80005b8 <GPIO_Init+0x2a4>)
 80003d6:	400b      	ands	r3, r1
 80003d8:	6093      	str	r3, [r2, #8]
 80003da:	e019      	b.n	8000410 <GPIO_Init+0xfc>
		}

		else if(pGPIOHandle->GPIO_PinConfig.Mode == GPIO_MODE_IT_RFET)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	2b06      	cmp	r3, #6
 80003e2:	d115      	bne.n	8000410 <GPIO_Init+0xfc>
		{
			EXTI->FTSR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 80003e4:	4b74      	ldr	r3, [pc, #464]	; (80005b8 <GPIO_Init+0x2a4>)
 80003e6:	68db      	ldr	r3, [r3, #12]
 80003e8:	687a      	ldr	r2, [r7, #4]
 80003ea:	7912      	ldrb	r2, [r2, #4]
 80003ec:	4611      	mov	r1, r2
 80003ee:	2201      	movs	r2, #1
 80003f0:	408a      	lsls	r2, r1
 80003f2:	4611      	mov	r1, r2
 80003f4:	4a70      	ldr	r2, [pc, #448]	; (80005b8 <GPIO_Init+0x2a4>)
 80003f6:	430b      	orrs	r3, r1
 80003f8:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 80003fa:	4b6f      	ldr	r3, [pc, #444]	; (80005b8 <GPIO_Init+0x2a4>)
 80003fc:	689b      	ldr	r3, [r3, #8]
 80003fe:	687a      	ldr	r2, [r7, #4]
 8000400:	7912      	ldrb	r2, [r2, #4]
 8000402:	4611      	mov	r1, r2
 8000404:	2201      	movs	r2, #1
 8000406:	408a      	lsls	r2, r1
 8000408:	4611      	mov	r1, r2
 800040a:	4a6b      	ldr	r2, [pc, #428]	; (80005b8 <GPIO_Init+0x2a4>)
 800040c:	430b      	orrs	r3, r1
 800040e:	6093      	str	r3, [r2, #8]

		}

		//2. Select the appropriate port to pass through SYSCFG reg
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.PinNumber / 4;
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	791b      	ldrb	r3, [r3, #4]
 8000414:	089b      	lsrs	r3, r3, #2
 8000416:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.PinNumber % 4;
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	791b      	ldrb	r3, [r3, #4]
 800041c:	f003 0303 	and.w	r3, r3, #3
 8000420:	74bb      	strb	r3, [r7, #18]
		uint8_t portCode = GPIOtoPortCode(pGPIOHandle->pGPIOx);
 8000422:	687b      	ldr	r3, [r7, #4]
 8000424:	681b      	ldr	r3, [r3, #0]
 8000426:	4618      	mov	r0, r3
 8000428:	f000 f9a6 	bl	8000778 <GPIOtoPortCode>
 800042c:	4603      	mov	r3, r0
 800042e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000430:	4b62      	ldr	r3, [pc, #392]	; (80005bc <GPIO_Init+0x2a8>)
 8000432:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000434:	4a61      	ldr	r2, [pc, #388]	; (80005bc <GPIO_Init+0x2a8>)
 8000436:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800043a:	6453      	str	r3, [r2, #68]	; 0x44
		SYSCFG->EXTICR[temp1] |= (portCode << (4 * temp2));
 800043c:	4a60      	ldr	r2, [pc, #384]	; (80005c0 <GPIO_Init+0x2ac>)
 800043e:	7cfb      	ldrb	r3, [r7, #19]
 8000440:	3302      	adds	r3, #2
 8000442:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000446:	7c79      	ldrb	r1, [r7, #17]
 8000448:	7cbb      	ldrb	r3, [r7, #18]
 800044a:	009b      	lsls	r3, r3, #2
 800044c:	fa01 f303 	lsl.w	r3, r1, r3
 8000450:	4618      	mov	r0, r3
 8000452:	495b      	ldr	r1, [pc, #364]	; (80005c0 <GPIO_Init+0x2ac>)
 8000454:	7cfb      	ldrb	r3, [r7, #19]
 8000456:	4302      	orrs	r2, r0
 8000458:	3302      	adds	r3, #2
 800045a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

		//3. Enable the interrupt delivery on the MCU side
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.PinNumber;
 800045e:	4b56      	ldr	r3, [pc, #344]	; (80005b8 <GPIO_Init+0x2a4>)
 8000460:	681b      	ldr	r3, [r3, #0]
 8000462:	687a      	ldr	r2, [r7, #4]
 8000464:	7912      	ldrb	r2, [r2, #4]
 8000466:	4611      	mov	r1, r2
 8000468:	2201      	movs	r2, #1
 800046a:	408a      	lsls	r2, r1
 800046c:	4611      	mov	r1, r2
 800046e:	4a52      	ldr	r2, [pc, #328]	; (80005b8 <GPIO_Init+0x2a4>)
 8000470:	430b      	orrs	r3, r1
 8000472:	6013      	str	r3, [r2, #0]
	}

	temp = 0;
 8000474:	2300      	movs	r3, #0
 8000476:	617b      	str	r3, [r7, #20]

	temp = pGPIOHandle->GPIO_PinConfig.Otype;
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	799b      	ldrb	r3, [r3, #6]
 800047c:	617b      	str	r3, [r7, #20]
	temp = (temp << (1 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	791b      	ldrb	r3, [r3, #4]
 8000482:	461a      	mov	r2, r3
 8000484:	697b      	ldr	r3, [r7, #20]
 8000486:	4093      	lsls	r3, r2
 8000488:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x1 << (1 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 800048a:	687b      	ldr	r3, [r7, #4]
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	791b      	ldrb	r3, [r3, #4]
 8000494:	4619      	mov	r1, r3
 8000496:	2301      	movs	r3, #1
 8000498:	408b      	lsls	r3, r1
 800049a:	43db      	mvns	r3, r3
 800049c:	4619      	mov	r1, r3
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	400a      	ands	r2, r1
 80004a4:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |=temp;
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	681b      	ldr	r3, [r3, #0]
 80004aa:	6859      	ldr	r1, [r3, #4]
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	697a      	ldr	r2, [r7, #20]
 80004b2:	430a      	orrs	r2, r1
 80004b4:	605a      	str	r2, [r3, #4]

	temp = 0;
 80004b6:	2300      	movs	r3, #0
 80004b8:	617b      	str	r3, [r7, #20]

	temp = pGPIOHandle->GPIO_PinConfig.Ospeed;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	79db      	ldrb	r3, [r3, #7]
 80004be:	617b      	str	r3, [r7, #20]
	temp = (temp << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	791b      	ldrb	r3, [r3, #4]
 80004c4:	005b      	lsls	r3, r3, #1
 80004c6:	697a      	ldr	r2, [r7, #20]
 80004c8:	fa02 f303 	lsl.w	r3, r2, r3
 80004cc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	689a      	ldr	r2, [r3, #8]
 80004d4:	687b      	ldr	r3, [r7, #4]
 80004d6:	791b      	ldrb	r3, [r3, #4]
 80004d8:	005b      	lsls	r3, r3, #1
 80004da:	2103      	movs	r1, #3
 80004dc:	fa01 f303 	lsl.w	r3, r1, r3
 80004e0:	43db      	mvns	r3, r3
 80004e2:	4619      	mov	r1, r3
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	400a      	ands	r2, r1
 80004ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	6899      	ldr	r1, [r3, #8]
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	697a      	ldr	r2, [r7, #20]
 80004f8:	430a      	orrs	r2, r1
 80004fa:	609a      	str	r2, [r3, #8]

	temp=0;
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

	temp = pGPIOHandle->GPIO_PinConfig.Pupd;
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	7a1b      	ldrb	r3, [r3, #8]
 8000504:	617b      	str	r3, [r7, #20]
	temp = (temp << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	791b      	ldrb	r3, [r3, #4]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	697a      	ldr	r2, [r7, #20]
 800050e:	fa02 f303 	lsl.w	r3, r2, r3
 8000512:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << (2 * pGPIOHandle->GPIO_PinConfig.PinNumber));
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	68da      	ldr	r2, [r3, #12]
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	791b      	ldrb	r3, [r3, #4]
 800051e:	005b      	lsls	r3, r3, #1
 8000520:	2103      	movs	r1, #3
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	43db      	mvns	r3, r3
 8000528:	4619      	mov	r1, r3
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	400a      	ands	r2, r1
 8000530:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |=temp;
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	681b      	ldr	r3, [r3, #0]
 8000536:	68d9      	ldr	r1, [r3, #12]
 8000538:	687b      	ldr	r3, [r7, #4]
 800053a:	681b      	ldr	r3, [r3, #0]
 800053c:	697a      	ldr	r2, [r7, #20]
 800053e:	430a      	orrs	r2, r1
 8000540:	60da      	str	r2, [r3, #12]

	if(pGPIOHandle->GPIO_PinConfig.Mode == GPIO_MODE_ALTFN)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	795b      	ldrb	r3, [r3, #5]
 8000546:	2b02      	cmp	r3, #2
 8000548:	d131      	bne.n	80005ae <GPIO_Init+0x29a>
	{
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.PinNumber / 8;
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	791b      	ldrb	r3, [r3, #4]
 800054e:	08db      	lsrs	r3, r3, #3
 8000550:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.PinNumber % 8;
 8000552:	687b      	ldr	r3, [r7, #4]
 8000554:	791b      	ldrb	r3, [r3, #4]
 8000556:	f003 0307 	and.w	r3, r3, #7
 800055a:	73fb      	strb	r3, [r7, #15]

		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	7c3a      	ldrb	r2, [r7, #16]
 8000562:	3208      	adds	r2, #8
 8000564:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000568:	7bfb      	ldrb	r3, [r7, #15]
 800056a:	009b      	lsls	r3, r3, #2
 800056c:	220f      	movs	r2, #15
 800056e:	fa02 f303 	lsl.w	r3, r2, r3
 8000572:	43db      	mvns	r3, r3
 8000574:	4618      	mov	r0, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	7c3a      	ldrb	r2, [r7, #16]
 800057c:	4001      	ands	r1, r0
 800057e:	3208      	adds	r2, #8
 8000580:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= ((pGPIOHandle->GPIO_PinConfig.Altfn) << (4 * temp2));
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	7c3a      	ldrb	r2, [r7, #16]
 800058a:	3208      	adds	r2, #8
 800058c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	7a5b      	ldrb	r3, [r3, #9]
 8000594:	461a      	mov	r2, r3
 8000596:	7bfb      	ldrb	r3, [r7, #15]
 8000598:	009b      	lsls	r3, r3, #2
 800059a:	fa02 f303 	lsl.w	r3, r2, r3
 800059e:	4618      	mov	r0, r3
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	7c3a      	ldrb	r2, [r7, #16]
 80005a6:	4301      	orrs	r1, r0
 80005a8:	3208      	adds	r2, #8
 80005aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80005ae:	bf00      	nop
 80005b0:	3718      	adds	r7, #24
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40013c00 	.word	0x40013c00
 80005bc:	40023800 	.word	0x40023800
 80005c0:	40013800 	.word	0x40013800

080005c4 <GPIO_ToggleOutputPin>:
{
	pGPIOx->ODR = Val;
}

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80005c4:	b480      	push	{r7}
 80005c6:	b083      	sub	sp, #12
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	6078      	str	r0, [r7, #4]
 80005cc:	460b      	mov	r3, r1
 80005ce:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= (1 << PinNumber);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	78fa      	ldrb	r2, [r7, #3]
 80005d6:	2101      	movs	r1, #1
 80005d8:	fa01 f202 	lsl.w	r2, r1, r2
 80005dc:	405a      	eors	r2, r3
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	615a      	str	r2, [r3, #20]
}
 80005e2:	bf00      	nop
 80005e4:	370c      	adds	r7, #12
 80005e6:	46bd      	mov	sp, r7
 80005e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ec:	4770      	bx	lr
	...

080005f0 <GPIO_IRQConfig>:

	return temp;
}

void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t EnorDi) // Enable interrupt on MPU side
{
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	460a      	mov	r2, r1
 80005fa:	71fb      	strb	r3, [r7, #7]
 80005fc:	4613      	mov	r3, r2
 80005fe:	71bb      	strb	r3, [r7, #6]
	if(EnorDi == ENABLE)
 8000600:	79bb      	ldrb	r3, [r7, #6]
 8000602:	2b01      	cmp	r3, #1
 8000604:	d133      	bne.n	800066e <GPIO_IRQConfig+0x7e>
	{
		if(IRQNumber >=0 && IRQNumber < 32)
 8000606:	79fb      	ldrb	r3, [r7, #7]
 8000608:	2b1f      	cmp	r3, #31
 800060a:	d80a      	bhi.n	8000622 <GPIO_IRQConfig+0x32>
		{
			NVIC_ISER->ISER[0] |= (1 << IRQNumber);
 800060c:	4b36      	ldr	r3, [pc, #216]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	79fa      	ldrb	r2, [r7, #7]
 8000612:	2101      	movs	r1, #1
 8000614:	fa01 f202 	lsl.w	r2, r1, r2
 8000618:	4611      	mov	r1, r2
 800061a:	4a33      	ldr	r2, [pc, #204]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 800061c:	430b      	orrs	r3, r1
 800061e:	6013      	str	r3, [r2, #0]
		else if(IRQNumber >=64 && IRQNumber < 96)
		{
			NVIC_ICER->ICER[2] |= (1 << (IRQNumber%64));
		}
	}
}
 8000620:	e05c      	b.n	80006dc <GPIO_IRQConfig+0xec>
		else if(IRQNumber >=32 && IRQNumber < 64)
 8000622:	79fb      	ldrb	r3, [r7, #7]
 8000624:	2b1f      	cmp	r3, #31
 8000626:	d90f      	bls.n	8000648 <GPIO_IRQConfig+0x58>
 8000628:	79fb      	ldrb	r3, [r7, #7]
 800062a:	2b3f      	cmp	r3, #63	; 0x3f
 800062c:	d80c      	bhi.n	8000648 <GPIO_IRQConfig+0x58>
			NVIC_ISER->ISER[1] |= (1 << (IRQNumber%32));
 800062e:	4b2e      	ldr	r3, [pc, #184]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 8000630:	685b      	ldr	r3, [r3, #4]
 8000632:	79fa      	ldrb	r2, [r7, #7]
 8000634:	f002 021f 	and.w	r2, r2, #31
 8000638:	2101      	movs	r1, #1
 800063a:	fa01 f202 	lsl.w	r2, r1, r2
 800063e:	4611      	mov	r1, r2
 8000640:	4a29      	ldr	r2, [pc, #164]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 8000642:	430b      	orrs	r3, r1
 8000644:	6053      	str	r3, [r2, #4]
 8000646:	e049      	b.n	80006dc <GPIO_IRQConfig+0xec>
		else if(IRQNumber >=64 && IRQNumber < 96)
 8000648:	79fb      	ldrb	r3, [r7, #7]
 800064a:	2b3f      	cmp	r3, #63	; 0x3f
 800064c:	d946      	bls.n	80006dc <GPIO_IRQConfig+0xec>
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b5f      	cmp	r3, #95	; 0x5f
 8000652:	d843      	bhi.n	80006dc <GPIO_IRQConfig+0xec>
			NVIC_ISER->ISER[2] |= (1 << (IRQNumber%64));
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 8000656:	689b      	ldr	r3, [r3, #8]
 8000658:	79fa      	ldrb	r2, [r7, #7]
 800065a:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 800065e:	2101      	movs	r1, #1
 8000660:	fa01 f202 	lsl.w	r2, r1, r2
 8000664:	4611      	mov	r1, r2
 8000666:	4a20      	ldr	r2, [pc, #128]	; (80006e8 <GPIO_IRQConfig+0xf8>)
 8000668:	430b      	orrs	r3, r1
 800066a:	6093      	str	r3, [r2, #8]
}
 800066c:	e036      	b.n	80006dc <GPIO_IRQConfig+0xec>
	else if(EnorDi == DISABLE)
 800066e:	79bb      	ldrb	r3, [r7, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d133      	bne.n	80006dc <GPIO_IRQConfig+0xec>
		if(IRQNumber >=0 && IRQNumber < 32)
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	2b1f      	cmp	r3, #31
 8000678:	d80a      	bhi.n	8000690 <GPIO_IRQConfig+0xa0>
			NVIC_ICER->ICER[0] |= (1 << IRQNumber);
 800067a:	4b1c      	ldr	r3, [pc, #112]	; (80006ec <GPIO_IRQConfig+0xfc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	79fa      	ldrb	r2, [r7, #7]
 8000680:	2101      	movs	r1, #1
 8000682:	fa01 f202 	lsl.w	r2, r1, r2
 8000686:	4611      	mov	r1, r2
 8000688:	4a18      	ldr	r2, [pc, #96]	; (80006ec <GPIO_IRQConfig+0xfc>)
 800068a:	430b      	orrs	r3, r1
 800068c:	6013      	str	r3, [r2, #0]
}
 800068e:	e025      	b.n	80006dc <GPIO_IRQConfig+0xec>
		else if(IRQNumber >=32 && IRQNumber < 64)
 8000690:	79fb      	ldrb	r3, [r7, #7]
 8000692:	2b1f      	cmp	r3, #31
 8000694:	d90f      	bls.n	80006b6 <GPIO_IRQConfig+0xc6>
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	2b3f      	cmp	r3, #63	; 0x3f
 800069a:	d80c      	bhi.n	80006b6 <GPIO_IRQConfig+0xc6>
			NVIC_ICER->ICER[1] |= (1 << (IRQNumber%32));
 800069c:	4b13      	ldr	r3, [pc, #76]	; (80006ec <GPIO_IRQConfig+0xfc>)
 800069e:	685b      	ldr	r3, [r3, #4]
 80006a0:	79fa      	ldrb	r2, [r7, #7]
 80006a2:	f002 021f 	and.w	r2, r2, #31
 80006a6:	2101      	movs	r1, #1
 80006a8:	fa01 f202 	lsl.w	r2, r1, r2
 80006ac:	4611      	mov	r1, r2
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <GPIO_IRQConfig+0xfc>)
 80006b0:	430b      	orrs	r3, r1
 80006b2:	6053      	str	r3, [r2, #4]
 80006b4:	e012      	b.n	80006dc <GPIO_IRQConfig+0xec>
		else if(IRQNumber >=64 && IRQNumber < 96)
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	2b3f      	cmp	r3, #63	; 0x3f
 80006ba:	d90f      	bls.n	80006dc <GPIO_IRQConfig+0xec>
 80006bc:	79fb      	ldrb	r3, [r7, #7]
 80006be:	2b5f      	cmp	r3, #95	; 0x5f
 80006c0:	d80c      	bhi.n	80006dc <GPIO_IRQConfig+0xec>
			NVIC_ICER->ICER[2] |= (1 << (IRQNumber%64));
 80006c2:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <GPIO_IRQConfig+0xfc>)
 80006c4:	689b      	ldr	r3, [r3, #8]
 80006c6:	79fa      	ldrb	r2, [r7, #7]
 80006c8:	f002 023f 	and.w	r2, r2, #63	; 0x3f
 80006cc:	2101      	movs	r1, #1
 80006ce:	fa01 f202 	lsl.w	r2, r1, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a05      	ldr	r2, [pc, #20]	; (80006ec <GPIO_IRQConfig+0xfc>)
 80006d6:	430b      	orrs	r3, r1
 80006d8:	6093      	str	r3, [r2, #8]
}
 80006da:	e7ff      	b.n	80006dc <GPIO_IRQConfig+0xec>
 80006dc:	bf00      	nop
 80006de:	370c      	adds	r7, #12
 80006e0:	46bd      	mov	sp, r7
 80006e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e6:	4770      	bx	lr
 80006e8:	e000e100 	.word	0xe000e100
 80006ec:	e000e180 	.word	0xe000e180

080006f0 <GPIO_IRQPriority>:

void GPIO_IRQPriority(uint8_t IRQNumber, uint32_t Priority)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	6039      	str	r1, [r7, #0]
 80006fa:	71fb      	strb	r3, [r7, #7]
	uint8_t temp1 = IRQNumber / 4;
 80006fc:	79fb      	ldrb	r3, [r7, #7]
 80006fe:	089b      	lsrs	r3, r3, #2
 8000700:	73fb      	strb	r3, [r7, #15]
	uint8_t temp2 = IRQNumber % 4;
 8000702:	79fb      	ldrb	r3, [r7, #7]
 8000704:	f003 0303 	and.w	r3, r3, #3
 8000708:	73bb      	strb	r3, [r7, #14]

	NVIC_IPR->IPR[temp1] |= (Priority << ((8*temp2)+4));
 800070a:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <GPIO_IRQPriority+0x44>)
 800070c:	7bfb      	ldrb	r3, [r7, #15]
 800070e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8000712:	7bbb      	ldrb	r3, [r7, #14]
 8000714:	00db      	lsls	r3, r3, #3
 8000716:	3304      	adds	r3, #4
 8000718:	683a      	ldr	r2, [r7, #0]
 800071a:	409a      	lsls	r2, r3
 800071c:	4805      	ldr	r0, [pc, #20]	; (8000734 <GPIO_IRQPriority+0x44>)
 800071e:	7bfb      	ldrb	r3, [r7, #15]
 8000720:	430a      	orrs	r2, r1
 8000722:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000726:	bf00      	nop
 8000728:	3714      	adds	r7, #20
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
 8000732:	bf00      	nop
 8000734:	e000e400 	.word	0xe000e400

08000738 <GPIO_IRQHandle>:

void GPIO_IRQHandle(uint8_t PinNumber)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
	/*if(((EXTI->PR >> PinNumber)& (1) == 1))
	{
		EXTI->PR &= ~(1<< PinNumber);
	}*/
	if(((EXTI->PR >> PinNumber) & 0x1))
 8000742:	4b0c      	ldr	r3, [pc, #48]	; (8000774 <GPIO_IRQHandle+0x3c>)
 8000744:	695a      	ldr	r2, [r3, #20]
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	fa22 f303 	lsr.w	r3, r2, r3
 800074c:	f003 0301 	and.w	r3, r3, #1
 8000750:	2b00      	cmp	r3, #0
 8000752:	d009      	beq.n	8000768 <GPIO_IRQHandle+0x30>
	{
		EXTI->PR |= 1 << PinNumber;
 8000754:	4b07      	ldr	r3, [pc, #28]	; (8000774 <GPIO_IRQHandle+0x3c>)
 8000756:	695b      	ldr	r3, [r3, #20]
 8000758:	79fa      	ldrb	r2, [r7, #7]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	4611      	mov	r1, r2
 8000762:	4a04      	ldr	r2, [pc, #16]	; (8000774 <GPIO_IRQHandle+0x3c>)
 8000764:	430b      	orrs	r3, r1
 8000766:	6153      	str	r3, [r2, #20]
	}
}
 8000768:	bf00      	nop
 800076a:	370c      	adds	r7, #12
 800076c:	46bd      	mov	sp, r7
 800076e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000772:	4770      	bx	lr
 8000774:	40013c00 	.word	0x40013c00

08000778 <GPIOtoPortCode>:

uint8_t GPIOtoPortCode(GPIO_RegDef_t *pGPIOx)
{
 8000778:	b480      	push	{r7}
 800077a:	b085      	sub	sp, #20
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
	uint8_t PortCode = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	73fb      	strb	r3, [r7, #15]
	if(pGPIOx == GPIOA){PortCode =  0;}
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a1e      	ldr	r2, [pc, #120]	; (8000800 <GPIOtoPortCode+0x88>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d102      	bne.n	8000792 <GPIOtoPortCode+0x1a>
 800078c:	2300      	movs	r3, #0
 800078e:	73fb      	strb	r3, [r7, #15]
 8000790:	e02f      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOB){PortCode = 1;}
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	4a1b      	ldr	r2, [pc, #108]	; (8000804 <GPIOtoPortCode+0x8c>)
 8000796:	4293      	cmp	r3, r2
 8000798:	d102      	bne.n	80007a0 <GPIOtoPortCode+0x28>
 800079a:	2301      	movs	r3, #1
 800079c:	73fb      	strb	r3, [r7, #15]
 800079e:	e028      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOC){PortCode = 2;}
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	4a19      	ldr	r2, [pc, #100]	; (8000808 <GPIOtoPortCode+0x90>)
 80007a4:	4293      	cmp	r3, r2
 80007a6:	d102      	bne.n	80007ae <GPIOtoPortCode+0x36>
 80007a8:	2302      	movs	r3, #2
 80007aa:	73fb      	strb	r3, [r7, #15]
 80007ac:	e021      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOD){PortCode = 3;}
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a16      	ldr	r2, [pc, #88]	; (800080c <GPIOtoPortCode+0x94>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d102      	bne.n	80007bc <GPIOtoPortCode+0x44>
 80007b6:	2303      	movs	r3, #3
 80007b8:	73fb      	strb	r3, [r7, #15]
 80007ba:	e01a      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOE){PortCode = 4;}
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4a14      	ldr	r2, [pc, #80]	; (8000810 <GPIOtoPortCode+0x98>)
 80007c0:	4293      	cmp	r3, r2
 80007c2:	d102      	bne.n	80007ca <GPIOtoPortCode+0x52>
 80007c4:	2304      	movs	r3, #4
 80007c6:	73fb      	strb	r3, [r7, #15]
 80007c8:	e013      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOF){PortCode = 5;}
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	4a11      	ldr	r2, [pc, #68]	; (8000814 <GPIOtoPortCode+0x9c>)
 80007ce:	4293      	cmp	r3, r2
 80007d0:	d102      	bne.n	80007d8 <GPIOtoPortCode+0x60>
 80007d2:	2305      	movs	r3, #5
 80007d4:	73fb      	strb	r3, [r7, #15]
 80007d6:	e00c      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOG){PortCode = 6;}
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	4a0f      	ldr	r2, [pc, #60]	; (8000818 <GPIOtoPortCode+0xa0>)
 80007dc:	4293      	cmp	r3, r2
 80007de:	d102      	bne.n	80007e6 <GPIOtoPortCode+0x6e>
 80007e0:	2306      	movs	r3, #6
 80007e2:	73fb      	strb	r3, [r7, #15]
 80007e4:	e005      	b.n	80007f2 <GPIOtoPortCode+0x7a>
	else if(pGPIOx == GPIOH){PortCode = 7;}
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	4a0c      	ldr	r2, [pc, #48]	; (800081c <GPIOtoPortCode+0xa4>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <GPIOtoPortCode+0x7a>
 80007ee:	2307      	movs	r3, #7
 80007f0:	73fb      	strb	r3, [r7, #15]

	return PortCode;
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80007f4:	4618      	mov	r0, r3
 80007f6:	3714      	adds	r7, #20
 80007f8:	46bd      	mov	sp, r7
 80007fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fe:	4770      	bx	lr
 8000800:	40020000 	.word	0x40020000
 8000804:	40020400 	.word	0x40020400
 8000808:	40020800 	.word	0x40020800
 800080c:	40020c00 	.word	0x40020c00
 8000810:	40021000 	.word	0x40021000
 8000814:	40021400 	.word	0x40021400
 8000818:	40021800 	.word	0x40021800
 800081c:	40021c00 	.word	0x40021c00

08000820 <__libc_init_array>:
 8000820:	b570      	push	{r4, r5, r6, lr}
 8000822:	4e0d      	ldr	r6, [pc, #52]	; (8000858 <__libc_init_array+0x38>)
 8000824:	4c0d      	ldr	r4, [pc, #52]	; (800085c <__libc_init_array+0x3c>)
 8000826:	1ba4      	subs	r4, r4, r6
 8000828:	10a4      	asrs	r4, r4, #2
 800082a:	2500      	movs	r5, #0
 800082c:	42a5      	cmp	r5, r4
 800082e:	d109      	bne.n	8000844 <__libc_init_array+0x24>
 8000830:	4e0b      	ldr	r6, [pc, #44]	; (8000860 <__libc_init_array+0x40>)
 8000832:	4c0c      	ldr	r4, [pc, #48]	; (8000864 <__libc_init_array+0x44>)
 8000834:	f000 f818 	bl	8000868 <_init>
 8000838:	1ba4      	subs	r4, r4, r6
 800083a:	10a4      	asrs	r4, r4, #2
 800083c:	2500      	movs	r5, #0
 800083e:	42a5      	cmp	r5, r4
 8000840:	d105      	bne.n	800084e <__libc_init_array+0x2e>
 8000842:	bd70      	pop	{r4, r5, r6, pc}
 8000844:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000848:	4798      	blx	r3
 800084a:	3501      	adds	r5, #1
 800084c:	e7ee      	b.n	800082c <__libc_init_array+0xc>
 800084e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000852:	4798      	blx	r3
 8000854:	3501      	adds	r5, #1
 8000856:	e7f2      	b.n	800083e <__libc_init_array+0x1e>
 8000858:	08000880 	.word	0x08000880
 800085c:	08000880 	.word	0x08000880
 8000860:	08000880 	.word	0x08000880
 8000864:	08000884 	.word	0x08000884

08000868 <_init>:
 8000868:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800086a:	bf00      	nop
 800086c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800086e:	bc08      	pop	{r3}
 8000870:	469e      	mov	lr, r3
 8000872:	4770      	bx	lr

08000874 <_fini>:
 8000874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000876:	bf00      	nop
 8000878:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800087a:	bc08      	pop	{r3}
 800087c:	469e      	mov	lr, r3
 800087e:	4770      	bx	lr
